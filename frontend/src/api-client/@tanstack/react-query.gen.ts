// This file is auto-generated by @hey-api/openapi-ts
import {
  type InfiniteData,
  type UseMutationOptions,
  infiniteQueryOptions,
  queryOptions,
} from '@tanstack/react-query';

import { client as _heyApiClient } from '../client.gen';
import {
  type Options,
  deleteApiUsersById,
  getApiAnalyticsRechargeTypeCounts,
  getApiAuthenticationCheck,
  getApiAuthenticationMfaEnable,
  getApiExportsCustomers,
  getApiExportsExpiringCustomers,
  getApiExportsRecharges,
  getApiExportsRechargesSummary,
  getApiExportsSummary,
  getApiPops,
  getApiReportsCustomers,
  getApiReportsExpiringCustomers,
  getApiReportsRecharges,
  getApiReportsRechargesSummary,
  getApiReportsSummary,
  getApiUsers,
  getApiUsersById,
  postApiAuthenticationLogin,
  postApiAuthenticationLogout,
  postApiAuthenticationMfaDisable,
  postApiAuthenticationMfaVerify,
  postApiAuthenticationRegister,
  postApiUsers,
  putApiUsersById,
} from '../sdk.gen';
import type {
  DeleteApiUsersByIdData,
  DeleteApiUsersByIdError,
  DeleteApiUsersByIdResponse,
  GetApiAnalyticsRechargeTypeCountsData,
  GetApiAuthenticationCheckData,
  GetApiAuthenticationMfaEnableData,
  GetApiExportsCustomersData,
  GetApiExportsExpiringCustomersData,
  GetApiExportsRechargesData,
  GetApiExportsRechargesSummaryData,
  GetApiExportsSummaryData,
  GetApiPopsData,
  GetApiReportsCustomersData,
  GetApiReportsExpiringCustomersData,
  GetApiReportsRechargesData,
  GetApiReportsRechargesSummaryData,
  GetApiReportsSummaryData,
  GetApiUsersByIdData,
  GetApiUsersData,
  GetApiUsersError,
  GetApiUsersResponse,
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginError,
  PostApiAuthenticationLoginResponse,
  PostApiAuthenticationLogoutData,
  PostApiAuthenticationLogoutError,
  PostApiAuthenticationLogoutResponse,
  PostApiAuthenticationMfaDisableData,
  PostApiAuthenticationMfaDisableError,
  PostApiAuthenticationMfaDisableResponse,
  PostApiAuthenticationMfaVerifyData,
  PostApiAuthenticationMfaVerifyError,
  PostApiAuthenticationMfaVerifyResponse,
  PostApiAuthenticationRegisterData,
  PostApiAuthenticationRegisterError,
  PostApiAuthenticationRegisterResponse,
  PostApiUsersData,
  PostApiUsersError,
  PostApiUsersResponse,
  PutApiUsersByIdData,
  PutApiUsersByIdError,
  PutApiUsersByIdResponse,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getApiAnalyticsRechargeTypeCountsQueryKey = (
  options?: Options<GetApiAnalyticsRechargeTypeCountsData>
) => createQueryKey('getApiAnalyticsRechargeTypeCounts', options);

/**
 * Recharge Type Counts
 * Endpoint to retrieve recharge type counts over a specified date range
 */
export const getApiAnalyticsRechargeTypeCountsOptions = (
  options?: Options<GetApiAnalyticsRechargeTypeCountsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAnalyticsRechargeTypeCounts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAnalyticsRechargeTypeCountsQueryKey(options),
  });
};

export const getApiAuthenticationCheckQueryKey = (
  options?: Options<GetApiAuthenticationCheckData>
) => createQueryKey('getApiAuthenticationCheck', options);

/**
 * Check Authentication
 * Endpoint to check if the user is authenticated
 */
export const getApiAuthenticationCheckOptions = (
  options?: Options<GetApiAuthenticationCheckData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationCheckQueryKey(options),
  });
};

export const postApiAuthenticationLoginQueryKey = (
  options?: Options<PostApiAuthenticationLoginData>
) => createQueryKey('postApiAuthenticationLogin', options);

/**
 * Login
 * Endpoint for user login
 */
export const postApiAuthenticationLoginOptions = (
  options?: Options<PostApiAuthenticationLoginData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLoginQueryKey(options),
  });
};

/**
 * Login
 * Endpoint for user login
 */
export const postApiAuthenticationLoginMutation = (
  options?: Partial<Options<PostApiAuthenticationLoginData>>
): UseMutationOptions<
  PostApiAuthenticationLoginResponse,
  PostApiAuthenticationLoginError,
  Options<PostApiAuthenticationLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationLoginResponse,
    PostApiAuthenticationLoginError,
    Options<PostApiAuthenticationLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthenticationLogoutQueryKey = (
  options?: Options<PostApiAuthenticationLogoutData>
) => createQueryKey('postApiAuthenticationLogout', options);

/**
 * Logout
 * Endpoint for user logout
 */
export const postApiAuthenticationLogoutOptions = (
  options?: Options<PostApiAuthenticationLogoutData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLogoutQueryKey(options),
  });
};

/**
 * Logout
 * Endpoint for user logout
 */
export const postApiAuthenticationLogoutMutation = (
  options?: Partial<Options<PostApiAuthenticationLogoutData>>
): UseMutationOptions<
  PostApiAuthenticationLogoutResponse,
  PostApiAuthenticationLogoutError,
  Options<PostApiAuthenticationLogoutData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationLogoutResponse,
    PostApiAuthenticationLogoutError,
    Options<PostApiAuthenticationLogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthenticationMfaDisableQueryKey = (
  options?: Options<PostApiAuthenticationMfaDisableData>
) => createQueryKey('postApiAuthenticationMfaDisable', options);

/**
 * Disable MFA
 * Endpoint to disable multi-factor authentication
 */
export const postApiAuthenticationMfaDisableOptions = (
  options?: Options<PostApiAuthenticationMfaDisableData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationMfaDisable({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationMfaDisableQueryKey(options),
  });
};

/**
 * Disable MFA
 * Endpoint to disable multi-factor authentication
 */
export const postApiAuthenticationMfaDisableMutation = (
  options?: Partial<Options<PostApiAuthenticationMfaDisableData>>
): UseMutationOptions<
  PostApiAuthenticationMfaDisableResponse,
  PostApiAuthenticationMfaDisableError,
  Options<PostApiAuthenticationMfaDisableData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationMfaDisableResponse,
    PostApiAuthenticationMfaDisableError,
    Options<PostApiAuthenticationMfaDisableData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationMfaDisable({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAuthenticationMfaEnableQueryKey = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => createQueryKey('getApiAuthenticationMfaEnable', options);

/**
 * Enable MFA
 * Endpoint to enable multi-factor authentication
 */
export const getApiAuthenticationMfaEnableOptions = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationMfaEnable({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationMfaEnableQueryKey(options),
  });
};

export const postApiAuthenticationMfaVerifyQueryKey = (
  options?: Options<PostApiAuthenticationMfaVerifyData>
) => createQueryKey('postApiAuthenticationMfaVerify', options);

/**
 * Verify MFA
 * Endpoint to verify multi-factor authentication code
 */
export const postApiAuthenticationMfaVerifyOptions = (
  options?: Options<PostApiAuthenticationMfaVerifyData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationMfaVerifyQueryKey(options),
  });
};

/**
 * Verify MFA
 * Endpoint to verify multi-factor authentication code
 */
export const postApiAuthenticationMfaVerifyMutation = (
  options?: Partial<Options<PostApiAuthenticationMfaVerifyData>>
): UseMutationOptions<
  PostApiAuthenticationMfaVerifyResponse,
  PostApiAuthenticationMfaVerifyError,
  Options<PostApiAuthenticationMfaVerifyData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationMfaVerifyResponse,
    PostApiAuthenticationMfaVerifyError,
    Options<PostApiAuthenticationMfaVerifyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthenticationRegisterQueryKey = (
  options?: Options<PostApiAuthenticationRegisterData>
) => createQueryKey('postApiAuthenticationRegister', options);

/**
 * Register
 * Endpoint for user registration
 */
export const postApiAuthenticationRegisterOptions = (
  options?: Options<PostApiAuthenticationRegisterData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationRegister({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationRegisterQueryKey(options),
  });
};

/**
 * Register
 * Endpoint for user registration
 */
export const postApiAuthenticationRegisterMutation = (
  options?: Partial<Options<PostApiAuthenticationRegisterData>>
): UseMutationOptions<
  PostApiAuthenticationRegisterResponse,
  PostApiAuthenticationRegisterError,
  Options<PostApiAuthenticationRegisterData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationRegisterResponse,
    PostApiAuthenticationRegisterError,
    Options<PostApiAuthenticationRegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationRegister({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiExportsCustomersQueryKey = (
  options?: Options<GetApiExportsCustomersData>
) => createQueryKey('getApiExportsCustomers', options);

/**
 * Customers Report Export
 * Endpoint to retrieve customers report export in CSV format.
 */
export const getApiExportsCustomersOptions = (
  options?: Options<GetApiExportsCustomersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiExportsCustomers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiExportsCustomersQueryKey(options),
  });
};

export const getApiExportsExpiringCustomersQueryKey = (
  options?: Options<GetApiExportsExpiringCustomersData>
) => createQueryKey('getApiExportsExpiringCustomers', options);

/**
 * Expiring Customers Report Export
 * Endpoint to retrieve expiring customers report export in CSV format.
 */
export const getApiExportsExpiringCustomersOptions = (
  options?: Options<GetApiExportsExpiringCustomersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiExportsExpiringCustomers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiExportsExpiringCustomersQueryKey(options),
  });
};

export const getApiExportsRechargesQueryKey = (
  options: Options<GetApiExportsRechargesData>
) => createQueryKey('getApiExportsRecharges', options);

/**
 * Recharges Report Export
 * Endpoint to retrieve recharges report export in CSV format.
 */
export const getApiExportsRechargesOptions = (
  options: Options<GetApiExportsRechargesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiExportsRecharges({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiExportsRechargesQueryKey(options),
  });
};

export const getApiExportsRechargesSummaryQueryKey = (
  options?: Options<GetApiExportsRechargesSummaryData>
) => createQueryKey('getApiExportsRechargesSummary', options);

/**
 * Recharges Summary Report Export
 * Endpoint to retrieve recharges summary report export in CSV format.
 */
export const getApiExportsRechargesSummaryOptions = (
  options?: Options<GetApiExportsRechargesSummaryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiExportsRechargesSummary({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiExportsRechargesSummaryQueryKey(options),
  });
};

export const getApiExportsSummaryQueryKey = (
  options?: Options<GetApiExportsSummaryData>
) => createQueryKey('getApiExportsSummary', options);

/**
 * Summary Report Export
 * Endpoint to retrieve summary report export in CSV format.
 */
export const getApiExportsSummaryOptions = (
  options?: Options<GetApiExportsSummaryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiExportsSummary({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiExportsSummaryQueryKey(options),
  });
};

export const getApiPopsQueryKey = (options?: Options<GetApiPopsData>) =>
  createQueryKey('getApiPops', options);

/**
 * Get POPs
 * Endpoint to retrieve a list of points of presence
 */
export const getApiPopsOptions = (options?: Options<GetApiPopsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiPops({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiPopsQueryKey(options),
  });
};

export const getApiReportsCustomersQueryKey = (
  options?: Options<GetApiReportsCustomersData>
) => createQueryKey('getApiReportsCustomers', options);

/**
 * Customers Report
 * Endpoint to retrieve customers report
 */
export const getApiReportsCustomersOptions = (
  options?: Options<GetApiReportsCustomersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiReportsCustomers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiReportsCustomersQueryKey(options),
  });
};

export const getApiReportsExpiringCustomersQueryKey = (
  options?: Options<GetApiReportsExpiringCustomersData>
) => createQueryKey('getApiReportsExpiringCustomers', options);

/**
 * Expiring Customers Report
 * Endpoint to retrieve expiring customers report
 */
export const getApiReportsExpiringCustomersOptions = (
  options?: Options<GetApiReportsExpiringCustomersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiReportsExpiringCustomers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiReportsExpiringCustomersQueryKey(options),
  });
};

export const getApiReportsRechargesQueryKey = (
  options: Options<GetApiReportsRechargesData>
) => createQueryKey('getApiReportsRecharges', options);

/**
 * Recharges Report
 * Endpoint to retrieve recharges report
 */
export const getApiReportsRechargesOptions = (
  options: Options<GetApiReportsRechargesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiReportsRecharges({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiReportsRechargesQueryKey(options),
  });
};

export const getApiReportsRechargesSummaryQueryKey = (
  options?: Options<GetApiReportsRechargesSummaryData>
) => createQueryKey('getApiReportsRechargesSummary', options);

/**
 * Recharges Summary Report
 * Endpoint to retrieve recharges summary report
 */
export const getApiReportsRechargesSummaryOptions = (
  options?: Options<GetApiReportsRechargesSummaryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiReportsRechargesSummary({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiReportsRechargesSummaryQueryKey(options),
  });
};

export const getApiReportsSummaryQueryKey = (
  options?: Options<GetApiReportsSummaryData>
) => createQueryKey('getApiReportsSummary', options);

/**
 * Summary Report
 * Endpoint to retrieve summary report
 */
export const getApiReportsSummaryOptions = (
  options?: Options<GetApiReportsSummaryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiReportsSummary({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiReportsSummaryQueryKey(options),
  });
};

export const getApiUsersQueryKey = (options?: Options<GetApiUsersData>) =>
  createQueryKey('getApiUsers', options);

/**
 * Get Users
 * Endpoint to retrieve a list of users
 */
export const getApiUsersOptions = (options?: Options<GetApiUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUsersQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
  queryKey: QueryKey<Options>,
  page: K
) => {
  const params = {
    ...queryKey[0],
  };
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const getApiUsersInfiniteQueryKey = (
  options?: Options<GetApiUsersData>
): QueryKey<Options<GetApiUsersData>> =>
  createQueryKey('getApiUsers', options, true);

/**
 * Get Users
 * Endpoint to retrieve a list of users
 */
export const getApiUsersInfiniteOptions = (
  options?: Options<GetApiUsersData>
) => {
  return infiniteQueryOptions<
    GetApiUsersResponse,
    GetApiUsersError,
    InfiniteData<GetApiUsersResponse>,
    QueryKey<Options<GetApiUsersData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiUsersData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiUsersData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiUsers({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiUsersInfiniteQueryKey(options),
    }
  );
};

export const postApiUsersQueryKey = (options?: Options<PostApiUsersData>) =>
  createQueryKey('postApiUsers', options);

/**
 * Create User
 * Endpoint to create a new user
 */
export const postApiUsersOptions = (options?: Options<PostApiUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUsersQueryKey(options),
  });
};

/**
 * Create User
 * Endpoint to create a new user
 */
export const postApiUsersMutation = (
  options?: Partial<Options<PostApiUsersData>>
): UseMutationOptions<
  PostApiUsersResponse,
  PostApiUsersError,
  Options<PostApiUsersData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUsersResponse,
    PostApiUsersError,
    Options<PostApiUsersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUsers({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete User
 * Endpoint to delete a user by ID
 */
export const deleteApiUsersByIdMutation = (
  options?: Partial<Options<DeleteApiUsersByIdData>>
): UseMutationOptions<
  DeleteApiUsersByIdResponse,
  DeleteApiUsersByIdError,
  Options<DeleteApiUsersByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiUsersByIdResponse,
    DeleteApiUsersByIdError,
    Options<DeleteApiUsersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiUsersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUsersByIdQueryKey = (
  options: Options<GetApiUsersByIdData>
) => createQueryKey('getApiUsersById', options);

/**
 * Get User
 * Endpoint to retrieve a user by ID
 */
export const getApiUsersByIdOptions = (
  options: Options<GetApiUsersByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUsersById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUsersByIdQueryKey(options),
  });
};

/**
 * Update User
 * Endpoint to update an existing user
 */
export const putApiUsersByIdMutation = (
  options?: Partial<Options<PutApiUsersByIdData>>
): UseMutationOptions<
  PutApiUsersByIdResponse,
  PutApiUsersByIdError,
  Options<PutApiUsersByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiUsersByIdResponse,
    PutApiUsersByIdError,
    Options<PutApiUsersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiUsersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
