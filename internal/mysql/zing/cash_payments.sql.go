// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cash_payments.sql

package zing

import (
	"context"
)

const getCashPayment = `-- name: GetCashPayment :one
SELECT
    id, paymentcode, customerid, productid, rechargeid, datecompleted, datecreated, deleted
FROM
    CashPayments
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetCashPayment(ctx context.Context, id string) (Cashpayment, error) {
	row := q.db.QueryRowContext(ctx, getCashPayment, id)
	var i Cashpayment
	err := row.Scan(
		&i.ID,
		&i.Paymentcode,
		&i.Customerid,
		&i.Productid,
		&i.Rechargeid,
		&i.Datecompleted,
		&i.Datecreated,
		&i.Deleted,
	)
	return i, err
}

const getCashPayments = `-- name: GetCashPayments :many
SELECT
    id, paymentcode, customerid, productid, rechargeid, datecompleted, datecreated, deleted
FROM
    CashPayments
LIMIT
    ?
OFFSET
    ?
`

type GetCashPaymentsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetCashPayments(ctx context.Context, arg GetCashPaymentsParams) ([]Cashpayment, error) {
	rows, err := q.db.QueryContext(ctx, getCashPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cashpayment
	for rows.Next() {
		var i Cashpayment
		if err := rows.Scan(
			&i.ID,
			&i.Paymentcode,
			&i.Customerid,
			&i.Productid,
			&i.Rechargeid,
			&i.Datecompleted,
			&i.Datecreated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
