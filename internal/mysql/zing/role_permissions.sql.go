// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role_permissions.sql

package zing

import (
	"context"
)

const getRolePermission = `-- name: GetRolePermission :one
SELECT
    id, roleid, permissionid, allowed, datecreated, deleted
FROM
    RolePermissions
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRolePermission(ctx context.Context, id string) (Rolepermission, error) {
	row := q.db.QueryRowContext(ctx, getRolePermission, id)
	var i Rolepermission
	err := row.Scan(
		&i.ID,
		&i.Roleid,
		&i.Permissionid,
		&i.Allowed,
		&i.Datecreated,
		&i.Deleted,
	)
	return i, err
}

const getRolePermissions = `-- name: GetRolePermissions :many
SELECT
    id, roleid, permissionid, allowed, datecreated, deleted
FROM
    RolePermissions
LIMIT
    ?
OFFSET
    ?
`

type GetRolePermissionsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRolePermissions(ctx context.Context, arg GetRolePermissionsParams) ([]Rolepermission, error) {
	rows, err := q.db.QueryContext(ctx, getRolePermissions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rolepermission
	for rows.Next() {
		var i Rolepermission
		if err := rows.Scan(
			&i.ID,
			&i.Roleid,
			&i.Permissionid,
			&i.Allowed,
			&i.Datecreated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
