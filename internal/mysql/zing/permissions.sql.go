// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permissions.sql

package zing

import (
	"context"
)

const getPermission = `-- name: GetPermission :one
SELECT
    id, name, section, type, ` + "`" + `order` + "`" + `, deleted
FROM
    Permissions
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetPermission(ctx context.Context, id int64) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermission, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Section,
		&i.Type,
		&i.Order,
		&i.Deleted,
	)
	return i, err
}

const getPermissions = `-- name: GetPermissions :many
SELECT
    id, name, section, type, ` + "`" + `order` + "`" + `, deleted
FROM
    Permissions
LIMIT
    ?
OFFSET
    ?
`

type GetPermissionsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetPermissions(ctx context.Context, arg GetPermissionsParams) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Section,
			&i.Type,
			&i.Order,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
