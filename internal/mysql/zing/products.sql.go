// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package zing

import (
	"context"
)

const getProduct = `-- name: GetProduct :one
SELECT
    id, price, name, category, period, serviceid, months, datecreated, deleted
FROM
    Products
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetProduct(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Name,
		&i.Category,
		&i.Period,
		&i.Serviceid,
		&i.Months,
		&i.Datecreated,
		&i.Deleted,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT
    id, price, name, category, period, serviceid, months, datecreated, deleted
FROM
    Products
LIMIT
    ?
OFFSET
    ?
`

type GetProductsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Name,
			&i.Category,
			&i.Period,
			&i.Serviceid,
			&i.Months,
			&i.Datecreated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
