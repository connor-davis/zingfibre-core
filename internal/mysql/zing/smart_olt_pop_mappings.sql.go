// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: smart_olt_pop_mappings.sql

package zing

import (
	"context"
)

const getSmartOLTPOPMapping = `-- name: GetSmartOLTPOPMapping :one
SELECT
    id, smartolttenantid, pop
FROM
    SmartOLTPOPMappings
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetSmartOLTPOPMapping(ctx context.Context, id int16) (Smartoltpopmapping, error) {
	row := q.db.QueryRowContext(ctx, getSmartOLTPOPMapping, id)
	var i Smartoltpopmapping
	err := row.Scan(&i.ID, &i.Smartolttenantid, &i.Pop)
	return i, err
}

const getSmartOLTPOPMappings = `-- name: GetSmartOLTPOPMappings :many
SELECT
    id, smartolttenantid, pop
FROM
    SmartOLTPOPMappings
LIMIT
    ?
OFFSET
    ?
`

type GetSmartOLTPOPMappingsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetSmartOLTPOPMappings(ctx context.Context, arg GetSmartOLTPOPMappingsParams) ([]Smartoltpopmapping, error) {
	rows, err := q.db.QueryContext(ctx, getSmartOLTPOPMappings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Smartoltpopmapping
	for rows.Next() {
		var i Smartoltpopmapping
		if err := rows.Scan(&i.ID, &i.Smartolttenantid, &i.Pop); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
