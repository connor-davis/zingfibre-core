// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer_notes.sql

package zing

import (
	"context"
)

const getCustomerNote = `-- name: GetCustomerNote :one
SELECT
    id, customerid, note, createdbyuserid, datecreated, deleted
FROM
    CustomerNotes
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetCustomerNote(ctx context.Context, id string) (Customernote, error) {
	row := q.db.QueryRowContext(ctx, getCustomerNote, id)
	var i Customernote
	err := row.Scan(
		&i.ID,
		&i.Customerid,
		&i.Note,
		&i.Createdbyuserid,
		&i.Datecreated,
		&i.Deleted,
	)
	return i, err
}

const getCustomerNotes = `-- name: GetCustomerNotes :many
SELECT
    id, customerid, note, createdbyuserid, datecreated, deleted
FROM
    CustomerNotes
LIMIT
    ?
OFFSET
    ?
`

type GetCustomerNotesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetCustomerNotes(ctx context.Context, arg GetCustomerNotesParams) ([]Customernote, error) {
	rows, err := q.db.QueryContext(ctx, getCustomerNotes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customernote
	for rows.Next() {
		var i Customernote
		if err := rows.Scan(
			&i.ID,
			&i.Customerid,
			&i.Note,
			&i.Createdbyuserid,
			&i.Datecreated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
