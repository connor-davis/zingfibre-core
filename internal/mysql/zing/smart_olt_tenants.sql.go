// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: smart_olt_tenants.sql

package zing

import (
	"context"
)

const getSmartOLTTenant = `-- name: GetSmartOLTTenant :one
SELECT
    id, apiurl, apikey
FROM
    SmartOLTTenants
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetSmartOLTTenant(ctx context.Context, id int16) (Smartolttenant, error) {
	row := q.db.QueryRowContext(ctx, getSmartOLTTenant, id)
	var i Smartolttenant
	err := row.Scan(&i.ID, &i.Apiurl, &i.Apikey)
	return i, err
}

const getSmartOLTTenants = `-- name: GetSmartOLTTenants :many
SELECT
    id, apiurl, apikey
FROM
    SmartOLTTenants
LIMIT
    ?
OFFSET
    ?
`

type GetSmartOLTTenantsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetSmartOLTTenants(ctx context.Context, arg GetSmartOLTTenantsParams) ([]Smartolttenant, error) {
	rows, err := q.db.QueryContext(ctx, getSmartOLTTenants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Smartolttenant
	for rows.Next() {
		var i Smartolttenant
		if err := rows.Scan(&i.ID, &i.Apiurl, &i.Apikey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
