// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customers.sql

package zing

import (
	"context"
)

const getCustomer = `-- name: GetCustomer :one
SELECT
    id, firstname, surname, password, passwordsalt, email, phonenumber, idnumber, radiususername, preferemailcommunication, language, registrationapproved, registrationdeclined, setownpassword, subscriptiontoken, proofofaddressdocumentid, idbookdocumentid, approvedbyuserid, addressid, potentialaddress, salesagentid, datecreated, deleted
FROM
    Customers
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetCustomer(ctx context.Context, id string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Surname,
		&i.Password,
		&i.Passwordsalt,
		&i.Email,
		&i.Phonenumber,
		&i.Idnumber,
		&i.Radiususername,
		&i.Preferemailcommunication,
		&i.Language,
		&i.Registrationapproved,
		&i.Registrationdeclined,
		&i.Setownpassword,
		&i.Subscriptiontoken,
		&i.Proofofaddressdocumentid,
		&i.Idbookdocumentid,
		&i.Approvedbyuserid,
		&i.Addressid,
		&i.Potentialaddress,
		&i.Salesagentid,
		&i.Datecreated,
		&i.Deleted,
	)
	return i, err
}

const getCustomers = `-- name: GetCustomers :many
SELECT
    id, firstname, surname, password, passwordsalt, email, phonenumber, idnumber, radiususername, preferemailcommunication, language, registrationapproved, registrationdeclined, setownpassword, subscriptiontoken, proofofaddressdocumentid, idbookdocumentid, approvedbyuserid, addressid, potentialaddress, salesagentid, datecreated, deleted
FROM
    Customers
LIMIT
    ?
OFFSET
    ?
`

type GetCustomersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetCustomers(ctx context.Context, arg GetCustomersParams) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, getCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Surname,
			&i.Password,
			&i.Passwordsalt,
			&i.Email,
			&i.Phonenumber,
			&i.Idnumber,
			&i.Radiususername,
			&i.Preferemailcommunication,
			&i.Language,
			&i.Registrationapproved,
			&i.Registrationdeclined,
			&i.Setownpassword,
			&i.Subscriptiontoken,
			&i.Proofofaddressdocumentid,
			&i.Idbookdocumentid,
			&i.Approvedbyuserid,
			&i.Addressid,
			&i.Potentialaddress,
			&i.Salesagentid,
			&i.Datecreated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
