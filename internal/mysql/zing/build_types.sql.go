// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: build_types.sql

package zing

import (
	"context"
)

const getBuildType = `-- name: GetBuildType :one
SELECT
    id, name
FROM
    BuildTypes
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetBuildType(ctx context.Context, id int16) (Buildtype, error) {
	row := q.db.QueryRowContext(ctx, getBuildType, id)
	var i Buildtype
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getBuildTypes = `-- name: GetBuildTypes :many
SELECT
    id, name
FROM
    BuildTypes
LIMIT
    ?
OFFSET
    ?
`

type GetBuildTypesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetBuildTypes(ctx context.Context, arg GetBuildTypesParams) ([]Buildtype, error) {
	rows, err := q.db.QueryContext(ctx, getBuildTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Buildtype
	for rows.Next() {
		var i Buildtype
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
