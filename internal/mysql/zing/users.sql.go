// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package zing

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT
    id, emailaddress, password, passwordsalt, firstname, lastname, active, roleid, twofactorkey, datecreated, deleted
FROM
    Users
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Emailaddress,
		&i.Password,
		&i.Passwordsalt,
		&i.Firstname,
		&i.Lastname,
		&i.Active,
		&i.Roleid,
		&i.Twofactorkey,
		&i.Datecreated,
		&i.Deleted,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
    id, emailaddress, password, passwordsalt, firstname, lastname, active, roleid, twofactorkey, datecreated, deleted
FROM
    Users
LIMIT
    ?
OFFSET
    ?
`

type GetUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Emailaddress,
			&i.Password,
			&i.Passwordsalt,
			&i.Firstname,
			&i.Lastname,
			&i.Active,
			&i.Roleid,
			&i.Twofactorkey,
			&i.Datecreated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
