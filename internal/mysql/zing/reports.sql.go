// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reports.sql

package zing

import (
	"context"
	"database/sql"
	"time"
)

const getReportsCustomers = `-- name: GetReportsCustomers :many
SELECT
    t1.FirstName AS first_name,
    t1.Surname AS surname,
    t1.Email AS email,
    t2.RadiusUsername AS radius_username,
    t1.PhoneNumber AS phone_number
FROM Customers t1
LEFT JOIN Addresses t2 ON t1.AddressId = t2.Id
WHERE
    TRIM(LOWER(t2.POP)) LIKE CONCAT(TRIM(LOWER(?)), '%')
`

type GetReportsCustomersRow struct {
	FirstName      sql.NullString
	Surname        sql.NullString
	Email          sql.NullString
	RadiusUsername sql.NullString
	PhoneNumber    sql.NullString
}

func (q *Queries) GetReportsCustomers(ctx context.Context, poi string) ([]GetReportsCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportsCustomers, poi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportsCustomersRow
	for rows.Next() {
		var i GetReportsCustomersRow
		if err := rows.Scan(
			&i.FirstName,
			&i.Surname,
			&i.Email,
			&i.RadiusUsername,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportsExpiringCustomers = `-- name: GetReportsExpiringCustomers :many
SELECT
    t1.FirstName AS first_name,
    t1.Surname AS surname,
    t1.Email AS email,
    t1.PhoneNumber AS phone_number,
    t4.RadiusUsername AS radius_username,
    t3.Name AS last_purchase_duration,
    t3.Category AS last_purchase_speed,
    t4.RadiusUsername AS t4_radius_username,
    CONCAT(?) AS expiration,
    CONCAT(?) AS address
FROM
    Customers t1
LEFT JOIN (
    SELECT
        CustomerID,
        MAX(DateCreated) AS LastRechargeDate
    FROM
        Recharges
    GROUP BY
        CustomerID
) AS latest_recharge ON t1.Id = latest_recharge.CustomerID
LEFT JOIN Recharges t2 ON latest_recharge.CustomerID = t2.CustomerID AND latest_recharge.LastRechargeDate = t2.DateCreated
LEFT JOIN Products t3 ON t2.ProductId = t3.Id
LEFT JOIN Addresses t4 ON t1.AddressId = t4.Id
WHERE
    TRIM(LOWER(t4.POP)) LIKE CONCAT(TRIM(LOWER(?)),'%')
`

type GetReportsExpiringCustomersParams struct {
	Expiration interface{}
	Address    interface{}
	Poi        string
}

type GetReportsExpiringCustomersRow struct {
	FirstName            sql.NullString
	Surname              sql.NullString
	Email                sql.NullString
	PhoneNumber          sql.NullString
	RadiusUsername       sql.NullString
	LastPurchaseDuration sql.NullString
	LastPurchaseSpeed    sql.NullString
	T4RadiusUsername     sql.NullString
	Expiration           string
	Address              string
}

func (q *Queries) GetReportsExpiringCustomers(ctx context.Context, arg GetReportsExpiringCustomersParams) ([]GetReportsExpiringCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportsExpiringCustomers, arg.Expiration, arg.Address, arg.Poi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportsExpiringCustomersRow
	for rows.Next() {
		var i GetReportsExpiringCustomersRow
		if err := rows.Scan(
			&i.FirstName,
			&i.Surname,
			&i.Email,
			&i.PhoneNumber,
			&i.RadiusUsername,
			&i.LastPurchaseDuration,
			&i.LastPurchaseSpeed,
			&i.T4RadiusUsername,
			&i.Expiration,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportsRechargeTypeCounts = `-- name: GetReportsRechargeTypeCounts :many
SELECT
	recharge_name, recharge_count, recharge_period, recharge_max_date
FROM
	(
		SELECT
			t3.Name AS recharge_name,
			COUNT(*) AS recharge_count,
			CASE
				WHEN ? = 'weeks' THEN CONCAT(
					FLOOR((DAY(t1.DateCreated) - 1) / 7) + 1,
					'-',
					MONTH(t1.DateCreated),
					'-',
					YEAR(t1.DateCreated)
				)
				WHEN ? = 'months' THEN CONCAT(MONTH(t1.DateCreated), '-', YEAR(t1.DateCreated))
			END AS recharge_period,
			MAX(t1.DateCreated) AS recharge_max_date
		FROM
			Recharges t1
			LEFT JOIN Customers t2 ON t1.CustomerId = t2.Id
			LEFT JOIN Products t3 ON t1.ProductId = t3.Id
		WHERE
			TRIM(LOWER(t2.RadiusUsername)) LIKE CONCAT(TRIM(LOWER(?)), '%')
			AND(
                (
                    ? = 'weeks'
                    AND t1.DateCreated >= DATE_SUB(DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY), INTERVAL (? - 1) WEEK)
                )
                OR(
                    ? = 'months'
                    AND t1.DateCreated >= DATE_SUB(DATE_SUB(CURDATE(), INTERVAL DAY(CURDATE()) - 1 DAY), INTERVAL (? - 1) MONTH)
                )
			)
		GROUP BY
			recharge_name,
			recharge_period
	) AS sub
ORDER BY
	recharge_max_date ASC,
    recharge_count DESC
`

type GetReportsRechargeTypeCountsParams struct {
	Period interface{}
	Poi    string
	Count  interface{}
}

type GetReportsRechargeTypeCountsRow struct {
	RechargeName    sql.NullString
	RechargeCount   int64
	RechargePeriod  interface{}
	RechargeMaxDate interface{}
}

func (q *Queries) GetReportsRechargeTypeCounts(ctx context.Context, arg GetReportsRechargeTypeCountsParams) ([]GetReportsRechargeTypeCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportsRechargeTypeCounts,
		arg.Period,
		arg.Period,
		arg.Poi,
		arg.Period,
		arg.Count,
		arg.Period,
		arg.Count,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportsRechargeTypeCountsRow
	for rows.Next() {
		var i GetReportsRechargeTypeCountsRow
		if err := rows.Scan(
			&i.RechargeName,
			&i.RechargeCount,
			&i.RechargePeriod,
			&i.RechargeMaxDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportsRecharges = `-- name: GetReportsRecharges :many
SELECT
    t1.DateCreated AS date_created,
    t2.Email AS email,
    t2.FirstName AS first_name,
    t2.Surname AS surname,
    CONCAT(t3.Category, ' ', t3.Name, ' Access') AS item_name,
    t1.PaymentAmount AS amount,
    t1.RechargeSuccessful AS successful,
    t4.ServiceId AS service_id,
    t5.Name AS build_name,
    t6.Name AS build_type
FROM
    Recharges t1
LEFT JOIN Customers t2 ON t1.CustomerId = t2.Id
LEFT JOIN Products t3 ON t1.ProductId = t3.Id
LEFT JOIN Addresses t4 ON t2.AddressId = t4.Id
LEFT JOIN Builds t5 ON t4.BuildId = t5.Id
LEFT JOIN BuildTypes t6 ON t5.BuildTypeId = t6.Id
WHERE
    TRIM(LOWER(t4.POP)) LIKE CONCAT(TRIM(LOWER(?)), '%')
    AND CAST(t1.DateCreated AS DATE) >= ?
    AND CAST(t1.DateCreated AS DATE) <= ?
ORDER BY
    t1.DateCreated DESC
`

type GetReportsRechargesParams struct {
	Poi       string
	StartDate time.Time
	EndDate   time.Time
}

type GetReportsRechargesRow struct {
	DateCreated time.Time
	Email       sql.NullString
	FirstName   sql.NullString
	Surname     sql.NullString
	ItemName    string
	Amount      sql.NullString
	Successful  bool
	ServiceID   sql.NullInt64
	BuildName   sql.NullString
	BuildType   sql.NullString
}

func (q *Queries) GetReportsRecharges(ctx context.Context, arg GetReportsRechargesParams) ([]GetReportsRechargesRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportsRecharges, arg.Poi, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportsRechargesRow
	for rows.Next() {
		var i GetReportsRechargesRow
		if err := rows.Scan(
			&i.DateCreated,
			&i.Email,
			&i.FirstName,
			&i.Surname,
			&i.ItemName,
			&i.Amount,
			&i.Successful,
			&i.ServiceID,
			&i.BuildName,
			&i.BuildType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportsRechargesSummary = `-- name: GetReportsRechargesSummary :many
SELECT
    t1.DateCreated AS date_created,
    t2.Email AS email,
    t2.FirstName AS first_name,
    t2.Surname AS surname,
    CONCAT(t3.Category, ' ', t3.Name, ' Access') AS item_name,
    t1.PaymentAmount AS amount,
    t1.RechargeSuccessful AS successful,
    t4.ServiceId AS service_id,
    t5.Name AS build_name,
    t6.Name AS build_type
FROM
    Recharges t1
LEFT JOIN Customers t2 ON t1.CustomerId = t2.Id
LEFT JOIN Products t3 ON t1.ProductId = t3.Id
LEFT JOIN Addresses t4 ON t2.AddressId = t4.Id
LEFT JOIN Builds t5 ON t4.BuildId = t5.Id
LEFT JOIN BuildTypes t6 ON t5.BuildTypeId = t6.Id
WHERE
    TRIM(LOWER(t4.POP)) LIKE CONCAT(TRIM(LOWER(?)), '%')
    AND t1.DateCreated >= DATE_FORMAT(NOW(), '%Y-%m-01')
ORDER BY
    t1.DateCreated DESC
`

type GetReportsRechargesSummaryRow struct {
	DateCreated time.Time
	Email       sql.NullString
	FirstName   sql.NullString
	Surname     sql.NullString
	ItemName    string
	Amount      sql.NullString
	Successful  bool
	ServiceID   sql.NullInt64
	BuildName   sql.NullString
	BuildType   sql.NullString
}

func (q *Queries) GetReportsRechargesSummary(ctx context.Context, poi string) ([]GetReportsRechargesSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportsRechargesSummary, poi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportsRechargesSummaryRow
	for rows.Next() {
		var i GetReportsRechargesSummaryRow
		if err := rows.Scan(
			&i.DateCreated,
			&i.Email,
			&i.FirstName,
			&i.Surname,
			&i.ItemName,
			&i.Amount,
			&i.Successful,
			&i.ServiceID,
			&i.BuildName,
			&i.BuildType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportsSummary = `-- name: GetReportsSummary :many
SELECT
    t2.DateCreated AS date_created,
    CONCAT(t3.Category, ' ', t3.Name, ' Access') AS item_name,
    t4.RadiusUsername AS radius_username,

    CASE WHEN JSON_VALID(PaymentServicePayload) = 1 
        THEN JSON_VALUE(PaymentServicePayload, '$.amount_gross') 
        ELSE '0' 
    END AS amount_gross,

    CASE WHEN JSON_VALID(PaymentServicePayload) = 1 
        THEN JSON_VALUE(PaymentServicePayload, '$.amount_fee') 
        ELSE '0.0' 
    END AS amount_fee,

    CASE WHEN JSON_VALID(PaymentServicePayload) = 1 
        THEN JSON_VALUE(PaymentServicePayload, '$.amount_net') 
        ELSE '0' 
    END AS amount_net,

    CASE WHEN JSON_VALID(PaymentServicePayload) = 1 
        THEN JSON_VALUE(PaymentServicePayload, '$.accountNumber') 
        ELSE '0'
    END AS cash_code,

    CASE 
        WHEN
            JSON_VALID(PaymentServicePayload) = 1 
            AND JSON_VALUE(PaymentServicePayload, '$.tenders[0].amount') REGEXP '^[0-9]+(\\.[0-9]+)?$'
        THEN 
            CAST(JSON_VALUE(PaymentServicePayload, '$.tenders[0].amount') AS DECIMAL(10,2)) / 100
        ELSE 0
    END AS cash_amount,

    t4.ServiceId AS service_id,
    t5.Name AS build_name,
    t6.Name AS build_type
FROM Customers t1
LEFT JOIN Recharges t2 ON t1.Id = t2.CustomerID
LEFT JOIN Products t3 ON t2.ProductId = t3.Id
LEFT JOIN Addresses t4 ON t1.AddressId = t4.Id
LEFT JOIN Builds t5 ON t4.BuildId = t5.Id
LEFT JOIN BuildTypes t6 ON t5.BuildTypeId = t6.Id
WHERE 
    TRIM(LOWER(t4.POP)) LIKE CONCAT(TRIM(LOWER(?)), '%')
    AND t2.DateCreated >= DATE_FORMAT(NOW(), '%Y-%m-01')
ORDER BY
    t2.DateCreated DESC
`

type GetReportsSummaryRow struct {
	DateCreated    sql.NullTime
	ItemName       string
	RadiusUsername sql.NullString
	AmountGross    string
	AmountFee      string
	AmountNet      string
	CashCode       string
	CashAmount     int32
	ServiceID      sql.NullInt64
	BuildName      sql.NullString
	BuildType      sql.NullString
}

func (q *Queries) GetReportsSummary(ctx context.Context, poi string) ([]GetReportsSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportsSummary, poi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportsSummaryRow
	for rows.Next() {
		var i GetReportsSummaryRow
		if err := rows.Scan(
			&i.DateCreated,
			&i.ItemName,
			&i.RadiusUsername,
			&i.AmountGross,
			&i.AmountFee,
			&i.AmountNet,
			&i.CashCode,
			&i.CashAmount,
			&i.ServiceID,
			&i.BuildName,
			&i.BuildType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
