// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: recharges.sql

package zing

import (
	"context"
	"database/sql"
)

const getRecharge = `-- name: GetRecharge :one
SELECT
	id, customerid, productid, method, paymentservicepaymentid, paymentservicepayload, paymentservicequeryparams, rechargesuccessful, failurereason, paymentamount, expirydate, previousrmexpirydate, userid, fromrmsvcid, tormsvcid, datecreated, deleted
FROM
	Recharges
WHERE
	id = ?
LIMIT
	1
`

func (q *Queries) GetRecharge(ctx context.Context, id string) (Recharge, error) {
	row := q.db.QueryRowContext(ctx, getRecharge, id)
	var i Recharge
	err := row.Scan(
		&i.ID,
		&i.Customerid,
		&i.Productid,
		&i.Method,
		&i.Paymentservicepaymentid,
		&i.Paymentservicepayload,
		&i.Paymentservicequeryparams,
		&i.Rechargesuccessful,
		&i.Failurereason,
		&i.Paymentamount,
		&i.Expirydate,
		&i.Previousrmexpirydate,
		&i.Userid,
		&i.Fromrmsvcid,
		&i.Tormsvcid,
		&i.Datecreated,
		&i.Deleted,
	)
	return i, err
}

const getRechargeTypeCounts = `-- name: GetRechargeTypeCounts :many
SELECT
	product_name, recharge_count, period, max_date
FROM
	(
		SELECT
			t3.Name AS product_name,
			COUNT(*) AS recharge_count,
			CASE
				WHEN ? = 'weeks' THEN CONCAT(
					FLOOR((DAY(t1.DateCreated) - 1) / 7) + 1,
					'-',
					MONTH(t1.DateCreated),
					'-',
					YEAR(t1.DateCreated)
				)
				WHEN ? = 'months' THEN CONCAT(MONTH(t1.DateCreated), '-', YEAR(t1.DateCreated))
			END AS period,
			MAX(t1.DateCreated) AS max_date
		FROM
			Recharges t1
			LEFT JOIN Customers t2 ON t1.CustomerId = t2.Id
			LEFT JOIN Products t3 ON t1.ProductId = t3.Id
		WHERE
			TRIM(LOWER(t2.RadiusUsername)) LIKE CONCAT(TRIM(LOWER(?)), '%')
			AND(
				(
					? = 'weeks'
					AND t1.DateCreated >= DATE_SUB(NOW(), INTERVAL ? WEEK)
				)
				OR(
					? = 'months'
					AND t1.DateCreated >= DATE_SUB(NOW(), INTERVAL ? MONTH)
				)
			)
		GROUP BY
			t3.Name,
			CASE
				WHEN ? = 'weeks' THEN CONCAT(
					FLOOR((DAY(t1.DateCreated) - 1) / 7) + 1,
					'-',
					MONTH(t1.DateCreated),
					'-',
					YEAR(t1.DateCreated)
				)
				WHEN ? = 'months' THEN CONCAT(MONTH(t1.DateCreated), '-', YEAR(t1.DateCreated))
			END
	) AS sub
ORDER BY
	max_date ASC
`

type GetRechargeTypeCountsParams struct {
	Period interface{}
	Poi    string
	Count  interface{}
}

type GetRechargeTypeCountsRow struct {
	ProductName   sql.NullString
	RechargeCount int64
	Period        interface{}
	MaxDate       interface{}
}

func (q *Queries) GetRechargeTypeCounts(ctx context.Context, arg GetRechargeTypeCountsParams) ([]GetRechargeTypeCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRechargeTypeCounts,
		arg.Period,
		arg.Period,
		arg.Poi,
		arg.Period,
		arg.Count,
		arg.Period,
		arg.Count,
		arg.Period,
		arg.Period,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRechargeTypeCountsRow
	for rows.Next() {
		var i GetRechargeTypeCountsRow
		if err := rows.Scan(
			&i.ProductName,
			&i.RechargeCount,
			&i.Period,
			&i.MaxDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecharges = `-- name: GetRecharges :many
SELECT
	id, customerid, productid, method, paymentservicepaymentid, paymentservicepayload, paymentservicequeryparams, rechargesuccessful, failurereason, paymentamount, expirydate, previousrmexpirydate, userid, fromrmsvcid, tormsvcid, datecreated, deleted
FROM
	Recharges
LIMIT
	?
OFFSET
	?
`

type GetRechargesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRecharges(ctx context.Context, arg GetRechargesParams) ([]Recharge, error) {
	rows, err := q.db.QueryContext(ctx, getRecharges, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recharge
	for rows.Next() {
		var i Recharge
		if err := rows.Scan(
			&i.ID,
			&i.Customerid,
			&i.Productid,
			&i.Method,
			&i.Paymentservicepaymentid,
			&i.Paymentservicepayload,
			&i.Paymentservicequeryparams,
			&i.Rechargesuccessful,
			&i.Failurereason,
			&i.Paymentamount,
			&i.Expirydate,
			&i.Previousrmexpirydate,
			&i.Userid,
			&i.Fromrmsvcid,
			&i.Tormsvcid,
			&i.Datecreated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
