// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: recharges.sql

package zing

import (
	"context"
)

const getRecharge = `-- name: GetRecharge :one
SELECT
    id, customerid, productid, method, paymentservicepaymentid, paymentservicepayload, paymentservicequeryparams, rechargesuccessful, failurereason, paymentamount, expirydate, previousrmexpirydate, userid, fromrmsvcid, tormsvcid, datecreated, deleted
FROM
    Recharges
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRecharge(ctx context.Context, id string) (Recharge, error) {
	row := q.db.QueryRowContext(ctx, getRecharge, id)
	var i Recharge
	err := row.Scan(
		&i.ID,
		&i.Customerid,
		&i.Productid,
		&i.Method,
		&i.Paymentservicepaymentid,
		&i.Paymentservicepayload,
		&i.Paymentservicequeryparams,
		&i.Rechargesuccessful,
		&i.Failurereason,
		&i.Paymentamount,
		&i.Expirydate,
		&i.Previousrmexpirydate,
		&i.Userid,
		&i.Fromrmsvcid,
		&i.Tormsvcid,
		&i.Datecreated,
		&i.Deleted,
	)
	return i, err
}

const getRecharges = `-- name: GetRecharges :many
SELECT
    id, customerid, productid, method, paymentservicepaymentid, paymentservicepayload, paymentservicequeryparams, rechargesuccessful, failurereason, paymentamount, expirydate, previousrmexpirydate, userid, fromrmsvcid, tormsvcid, datecreated, deleted
FROM
    Recharges
LIMIT
    ?
OFFSET
    ?
`

type GetRechargesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRecharges(ctx context.Context, arg GetRechargesParams) ([]Recharge, error) {
	rows, err := q.db.QueryContext(ctx, getRecharges, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recharge
	for rows.Next() {
		var i Recharge
		if err := rows.Scan(
			&i.ID,
			&i.Customerid,
			&i.Productid,
			&i.Method,
			&i.Paymentservicepaymentid,
			&i.Paymentservicepayload,
			&i.Paymentservicequeryparams,
			&i.Rechargesuccessful,
			&i.Failurereason,
			&i.Paymentamount,
			&i.Expirydate,
			&i.Previousrmexpirydate,
			&i.Userid,
			&i.Fromrmsvcid,
			&i.Tormsvcid,
			&i.Datecreated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
