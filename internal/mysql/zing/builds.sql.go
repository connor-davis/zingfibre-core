// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: builds.sql

package zing

import (
	"context"
)

const getBuild = `-- name: GetBuild :one
SELECT
    id, name, buildtypeid, datecreated, deleted
FROM
    Builds
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetBuild(ctx context.Context, id string) (Build, error) {
	row := q.db.QueryRowContext(ctx, getBuild, id)
	var i Build
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Buildtypeid,
		&i.Datecreated,
		&i.Deleted,
	)
	return i, err
}

const getBuilds = `-- name: GetBuilds :many
SELECT
    id, name, buildtypeid, datecreated, deleted
FROM
    Builds
LIMIT
    ?
OFFSET
    ?
`

type GetBuildsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetBuilds(ctx context.Context, arg GetBuildsParams) ([]Build, error) {
	rows, err := q.db.QueryContext(ctx, getBuilds, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Build
	for rows.Next() {
		var i Build
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Buildtypeid,
			&i.Datecreated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
