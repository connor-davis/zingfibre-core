// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_permissions.sql

package zing

import (
	"context"
)

const getUserPermission = `-- name: GetUserPermission :one
SELECT
    id, userid, permissionid, allowed, datecreated, deleted
FROM
    UserPermissions
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetUserPermission(ctx context.Context, id string) (Userpermission, error) {
	row := q.db.QueryRowContext(ctx, getUserPermission, id)
	var i Userpermission
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Permissionid,
		&i.Allowed,
		&i.Datecreated,
		&i.Deleted,
	)
	return i, err
}

const getUserPermissions = `-- name: GetUserPermissions :many
SELECT
    id, userid, permissionid, allowed, datecreated, deleted
FROM
    UserPermissions
LIMIT
    ?
OFFSET
    ?
`

type GetUserPermissionsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUserPermissions(ctx context.Context, arg GetUserPermissionsParams) ([]Userpermission, error) {
	rows, err := q.db.QueryContext(ctx, getUserPermissions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Userpermission
	for rows.Next() {
		var i Userpermission
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Permissionid,
			&i.Allowed,
			&i.Datecreated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
