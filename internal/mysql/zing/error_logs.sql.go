// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: error_logs.sql

package zing

import (
	"context"
)

const getErrorLog = `-- name: GetErrorLog :one
SELECT
    id, exceptionmessage, innerexceptionmessage, stacktrace, datecreated
FROM
    ErrorLogs
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetErrorLog(ctx context.Context, id int64) (Errorlog, error) {
	row := q.db.QueryRowContext(ctx, getErrorLog, id)
	var i Errorlog
	err := row.Scan(
		&i.ID,
		&i.Exceptionmessage,
		&i.Innerexceptionmessage,
		&i.Stacktrace,
		&i.Datecreated,
	)
	return i, err
}

const getErrorLogs = `-- name: GetErrorLogs :many
SELECT
    id, exceptionmessage, innerexceptionmessage, stacktrace, datecreated
FROM
    ErrorLogs
LIMIT
    ?
OFFSET
    ?
`

type GetErrorLogsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetErrorLogs(ctx context.Context, arg GetErrorLogsParams) ([]Errorlog, error) {
	rows, err := q.db.QueryContext(ctx, getErrorLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Errorlog
	for rows.Next() {
		var i Errorlog
		if err := rows.Scan(
			&i.ID,
			&i.Exceptionmessage,
			&i.Innerexceptionmessage,
			&i.Stacktrace,
			&i.Datecreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
