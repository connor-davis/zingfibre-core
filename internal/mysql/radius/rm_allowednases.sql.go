// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_allowednases.sql

package radius

import (
	"context"
)

const getRmAllowednas = `-- name: GetRmAllowednas :one
SELECT
    srvid, nasid
FROM
    rm_allowednases
WHERE
    srvid = ?
LIMIT
    1
`

func (q *Queries) GetRmAllowednas(ctx context.Context, srvid int32) (RmAllowednase, error) {
	row := q.db.QueryRowContext(ctx, getRmAllowednas, srvid)
	var i RmAllowednase
	err := row.Scan(&i.Srvid, &i.Nasid)
	return i, err
}

const getRmAllowednases = `-- name: GetRmAllowednases :many
SELECT
    srvid, nasid
FROM
    rm_allowednases
LIMIT
    ?
OFFSET
    ?
`

type GetRmAllowednasesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmAllowednases(ctx context.Context, arg GetRmAllowednasesParams) ([]RmAllowednase, error) {
	rows, err := q.db.QueryContext(ctx, getRmAllowednases, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmAllowednase
	for rows.Next() {
		var i RmAllowednase
		if err := rows.Scan(&i.Srvid, &i.Nasid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
