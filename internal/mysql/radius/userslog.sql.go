// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: userslog.sql

package radius

import (
	"context"
)

const getUserslog = `-- name: GetUserslog :one
SELECT
    id, timestamp, username, oldexpiration, expiration, srvid, oldsrvid, action
FROM
    userslog
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetUserslog(ctx context.Context, id uint32) (Userslog, error) {
	row := q.db.QueryRowContext(ctx, getUserslog, id)
	var i Userslog
	err := row.Scan(
		&i.ID,
		&i.Timestamp,
		&i.Username,
		&i.Oldexpiration,
		&i.Expiration,
		&i.Srvid,
		&i.Oldsrvid,
		&i.Action,
	)
	return i, err
}

const getUserslogs = `-- name: GetUserslogs :many
SELECT
    id, timestamp, username, oldexpiration, expiration, srvid, oldsrvid, action
FROM
    userslog
LIMIT
    ?
OFFSET
    ?
`

type GetUserslogsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUserslogs(ctx context.Context, arg GetUserslogsParams) ([]Userslog, error) {
	rows, err := q.db.QueryContext(ctx, getUserslogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Userslog
	for rows.Next() {
		var i Userslog
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Username,
			&i.Oldexpiration,
			&i.Expiration,
			&i.Srvid,
			&i.Oldsrvid,
			&i.Action,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
