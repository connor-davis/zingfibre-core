// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_ap.sql

package radius

import (
	"context"
)

const getRmAp = `-- name: GetRmAp :one
SELECT
    id, name, enable, accessmode, ip, community, apiusername, apipassword, apiver, description
FROM
    rm_ap
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRmAp(ctx context.Context, id int32) (RmAp, error) {
	row := q.db.QueryRowContext(ctx, getRmAp, id)
	var i RmAp
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Enable,
		&i.Accessmode,
		&i.Ip,
		&i.Community,
		&i.Apiusername,
		&i.Apipassword,
		&i.Apiver,
		&i.Description,
	)
	return i, err
}

const getRmAps = `-- name: GetRmAps :many
SELECT
    id, name, enable, accessmode, ip, community, apiusername, apipassword, apiver, description
FROM
    rm_ap
LIMIT
    ?
OFFSET
    ?
`

type GetRmApsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmAps(ctx context.Context, arg GetRmApsParams) ([]RmAp, error) {
	rows, err := q.db.QueryContext(ctx, getRmAps, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmAp
	for rows.Next() {
		var i RmAp
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Enable,
			&i.Accessmode,
			&i.Ip,
			&i.Community,
			&i.Apiusername,
			&i.Apipassword,
			&i.Apiver,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
