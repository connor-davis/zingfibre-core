// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_newusers.sql

package radius

import (
	"context"
)

const getRmNewuser = `-- name: GetRmNewuser :one
SELECT
    id, username, firstname, lastname, address, city, zip, country, state, phone, mobile, email, vatid, srvid, actcode, actcount, lang
FROM
    rm_newusers
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRmNewuser(ctx context.Context, id int32) (RmNewuser, error) {
	row := q.db.QueryRowContext(ctx, getRmNewuser, id)
	var i RmNewuser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Address,
		&i.City,
		&i.Zip,
		&i.Country,
		&i.State,
		&i.Phone,
		&i.Mobile,
		&i.Email,
		&i.Vatid,
		&i.Srvid,
		&i.Actcode,
		&i.Actcount,
		&i.Lang,
	)
	return i, err
}

const getRmNewusers = `-- name: GetRmNewusers :many
SELECT
    id, username, firstname, lastname, address, city, zip, country, state, phone, mobile, email, vatid, srvid, actcode, actcount, lang
FROM
    rm_newusers
LIMIT
    ?
OFFSET
    ?
`

type GetRmNewusersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmNewusers(ctx context.Context, arg GetRmNewusersParams) ([]RmNewuser, error) {
	rows, err := q.db.QueryContext(ctx, getRmNewusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmNewuser
	for rows.Next() {
		var i RmNewuser
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Lastname,
			&i.Address,
			&i.City,
			&i.Zip,
			&i.Country,
			&i.State,
			&i.Phone,
			&i.Mobile,
			&i.Email,
			&i.Vatid,
			&i.Srvid,
			&i.Actcode,
			&i.Actcount,
			&i.Lang,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
