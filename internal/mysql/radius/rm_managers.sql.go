// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_managers.sql

package radius

import (
	"context"
)

const getRmManager = `-- name: GetRmManager :one
SELECT
    managername, password, firstname, lastname, phone, mobile, address, city, zip, country, state, comment, company, vatid, email, balance, perm_listusers, perm_createusers, perm_editusers, perm_edituserspriv, perm_deleteusers, perm_listmanagers, perm_createmanagers, perm_editmanagers, perm_deletemanagers, perm_listservices, perm_createservices, perm_editservices, perm_deleteservices, perm_listonlineusers, perm_listinvoices, perm_trafficreport, perm_addcredits, perm_negbalance, perm_listallinvoices, perm_showinvtotals, perm_logout, perm_cardsys, perm_editinvoice, perm_allusers, perm_allowdiscount, perm_enwriteoff, perm_accessap, perm_cts, perm_email, perm_sms, enablemanager, lang
FROM
    rm_managers
WHERE
    managername = ?
LIMIT
    1
`

func (q *Queries) GetRmManager(ctx context.Context, managername string) (RmManager, error) {
	row := q.db.QueryRowContext(ctx, getRmManager, managername)
	var i RmManager
	err := row.Scan(
		&i.Managername,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.Mobile,
		&i.Address,
		&i.City,
		&i.Zip,
		&i.Country,
		&i.State,
		&i.Comment,
		&i.Company,
		&i.Vatid,
		&i.Email,
		&i.Balance,
		&i.PermListusers,
		&i.PermCreateusers,
		&i.PermEditusers,
		&i.PermEdituserspriv,
		&i.PermDeleteusers,
		&i.PermListmanagers,
		&i.PermCreatemanagers,
		&i.PermEditmanagers,
		&i.PermDeletemanagers,
		&i.PermListservices,
		&i.PermCreateservices,
		&i.PermEditservices,
		&i.PermDeleteservices,
		&i.PermListonlineusers,
		&i.PermListinvoices,
		&i.PermTrafficreport,
		&i.PermAddcredits,
		&i.PermNegbalance,
		&i.PermListallinvoices,
		&i.PermShowinvtotals,
		&i.PermLogout,
		&i.PermCardsys,
		&i.PermEditinvoice,
		&i.PermAllusers,
		&i.PermAllowdiscount,
		&i.PermEnwriteoff,
		&i.PermAccessap,
		&i.PermCts,
		&i.PermEmail,
		&i.PermSms,
		&i.Enablemanager,
		&i.Lang,
	)
	return i, err
}

const getRmManagers = `-- name: GetRmManagers :many
SELECT
    managername, password, firstname, lastname, phone, mobile, address, city, zip, country, state, comment, company, vatid, email, balance, perm_listusers, perm_createusers, perm_editusers, perm_edituserspriv, perm_deleteusers, perm_listmanagers, perm_createmanagers, perm_editmanagers, perm_deletemanagers, perm_listservices, perm_createservices, perm_editservices, perm_deleteservices, perm_listonlineusers, perm_listinvoices, perm_trafficreport, perm_addcredits, perm_negbalance, perm_listallinvoices, perm_showinvtotals, perm_logout, perm_cardsys, perm_editinvoice, perm_allusers, perm_allowdiscount, perm_enwriteoff, perm_accessap, perm_cts, perm_email, perm_sms, enablemanager, lang
FROM
    rm_managers
LIMIT
    ?
OFFSET
    ?
`

type GetRmManagersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmManagers(ctx context.Context, arg GetRmManagersParams) ([]RmManager, error) {
	rows, err := q.db.QueryContext(ctx, getRmManagers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmManager
	for rows.Next() {
		var i RmManager
		if err := rows.Scan(
			&i.Managername,
			&i.Password,
			&i.Firstname,
			&i.Lastname,
			&i.Phone,
			&i.Mobile,
			&i.Address,
			&i.City,
			&i.Zip,
			&i.Country,
			&i.State,
			&i.Comment,
			&i.Company,
			&i.Vatid,
			&i.Email,
			&i.Balance,
			&i.PermListusers,
			&i.PermCreateusers,
			&i.PermEditusers,
			&i.PermEdituserspriv,
			&i.PermDeleteusers,
			&i.PermListmanagers,
			&i.PermCreatemanagers,
			&i.PermEditmanagers,
			&i.PermDeletemanagers,
			&i.PermListservices,
			&i.PermCreateservices,
			&i.PermEditservices,
			&i.PermDeleteservices,
			&i.PermListonlineusers,
			&i.PermListinvoices,
			&i.PermTrafficreport,
			&i.PermAddcredits,
			&i.PermNegbalance,
			&i.PermListallinvoices,
			&i.PermShowinvtotals,
			&i.PermLogout,
			&i.PermCardsys,
			&i.PermEditinvoice,
			&i.PermAllusers,
			&i.PermAllowdiscount,
			&i.PermEnwriteoff,
			&i.PermAccessap,
			&i.PermCts,
			&i.PermEmail,
			&i.PermSms,
			&i.Enablemanager,
			&i.Lang,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
