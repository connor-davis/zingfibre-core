// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: nas.sql

package radius

import (
	"context"
)

const getNas = `-- name: GetNas :one
SELECT
    id, nasname, shortname, type, ports, secret, community, description, starospassword, ciscobwmode, apiusername, apipassword, apiver, coamode
FROM
    nas
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetNas(ctx context.Context, id int32) (Na, error) {
	row := q.db.QueryRowContext(ctx, getNas, id)
	var i Na
	err := row.Scan(
		&i.ID,
		&i.Nasname,
		&i.Shortname,
		&i.Type,
		&i.Ports,
		&i.Secret,
		&i.Community,
		&i.Description,
		&i.Starospassword,
		&i.Ciscobwmode,
		&i.Apiusername,
		&i.Apipassword,
		&i.Apiver,
		&i.Coamode,
	)
	return i, err
}

const getNases = `-- name: GetNases :many
SELECT
    id, nasname, shortname, type, ports, secret, community, description, starospassword, ciscobwmode, apiusername, apipassword, apiver, coamode
FROM
    nas
LIMIT
    ?
OFFSET
    ?
`

type GetNasesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetNases(ctx context.Context, arg GetNasesParams) ([]Na, error) {
	rows, err := q.db.QueryContext(ctx, getNases, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Na
	for rows.Next() {
		var i Na
		if err := rows.Scan(
			&i.ID,
			&i.Nasname,
			&i.Shortname,
			&i.Type,
			&i.Ports,
			&i.Secret,
			&i.Community,
			&i.Description,
			&i.Starospassword,
			&i.Ciscobwmode,
			&i.Apiusername,
			&i.Apipassword,
			&i.Apiver,
			&i.Coamode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
