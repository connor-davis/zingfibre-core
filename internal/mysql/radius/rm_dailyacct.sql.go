// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_dailyacct.sql

package radius

import (
	"context"
)

const getRmDailyacct = `-- name: GetRmDailyacct :one
SELECT
    radacctid, acctuniqueid, username, acctstarttime, acctstoptime, acctsessiontime, dlbytesstart, dlbytesstop, dlbytes, ulbytesstart, ulbytesstop, ulbytes
FROM
    rm_dailyacct
WHERE
    radacctid = ?
LIMIT
    1
`

func (q *Queries) GetRmDailyacct(ctx context.Context, radacctid int64) (RmDailyacct, error) {
	row := q.db.QueryRowContext(ctx, getRmDailyacct, radacctid)
	var i RmDailyacct
	err := row.Scan(
		&i.Radacctid,
		&i.Acctuniqueid,
		&i.Username,
		&i.Acctstarttime,
		&i.Acctstoptime,
		&i.Acctsessiontime,
		&i.Dlbytesstart,
		&i.Dlbytesstop,
		&i.Dlbytes,
		&i.Ulbytesstart,
		&i.Ulbytesstop,
		&i.Ulbytes,
	)
	return i, err
}

const getRmDailyaccts = `-- name: GetRmDailyaccts :many
SELECT
    radacctid, acctuniqueid, username, acctstarttime, acctstoptime, acctsessiontime, dlbytesstart, dlbytesstop, dlbytes, ulbytesstart, ulbytesstop, ulbytes
FROM
    rm_dailyacct
LIMIT
    ?
OFFSET
    ?
`

type GetRmDailyacctsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmDailyaccts(ctx context.Context, arg GetRmDailyacctsParams) ([]RmDailyacct, error) {
	rows, err := q.db.QueryContext(ctx, getRmDailyaccts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmDailyacct
	for rows.Next() {
		var i RmDailyacct
		if err := rows.Scan(
			&i.Radacctid,
			&i.Acctuniqueid,
			&i.Username,
			&i.Acctstarttime,
			&i.Acctstoptime,
			&i.Acctsessiontime,
			&i.Dlbytesstart,
			&i.Dlbytesstop,
			&i.Dlbytes,
			&i.Ulbytesstart,
			&i.Ulbytesstop,
			&i.Ulbytes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
