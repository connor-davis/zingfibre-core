// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: radreply.sql

package radius

import (
	"context"
)

const getRadreplies = `-- name: GetRadreplies :many
SELECT
    id, username, attribute, op, value
FROM
    radreply
LIMIT
    ?
OFFSET
    ?
`

type GetRadrepliesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRadreplies(ctx context.Context, arg GetRadrepliesParams) ([]Radreply, error) {
	rows, err := q.db.QueryContext(ctx, getRadreplies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Radreply
	for rows.Next() {
		var i Radreply
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Attribute,
			&i.Op,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRadreply = `-- name: GetRadreply :one
SELECT
    id, username, attribute, op, value
FROM
    radreply
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRadreply(ctx context.Context, id uint32) (Radreply, error) {
	row := q.db.QueryRowContext(ctx, getRadreply, id)
	var i Radreply
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Attribute,
		&i.Op,
		&i.Value,
	)
	return i, err
}
