// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_changesrv.sql

package radius

import (
	"context"
)

const getRmChangesrv = `-- name: GetRmChangesrv :one
SELECT
    id, username, newsrvid, newsrvname, scheduledate, requestdate, status, transid, requested
FROM
    rm_changesrv
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRmChangesrv(ctx context.Context, id int32) (RmChangesrv, error) {
	row := q.db.QueryRowContext(ctx, getRmChangesrv, id)
	var i RmChangesrv
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Newsrvid,
		&i.Newsrvname,
		&i.Scheduledate,
		&i.Requestdate,
		&i.Status,
		&i.Transid,
		&i.Requested,
	)
	return i, err
}

const getRmChangesrvs = `-- name: GetRmChangesrvs :many
SELECT
    id, username, newsrvid, newsrvname, scheduledate, requestdate, status, transid, requested
FROM
    rm_changesrv
LIMIT
    ?
OFFSET
    ?
`

type GetRmChangesrvsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmChangesrvs(ctx context.Context, arg GetRmChangesrvsParams) ([]RmChangesrv, error) {
	rows, err := q.db.QueryContext(ctx, getRmChangesrvs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmChangesrv
	for rows.Next() {
		var i RmChangesrv
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Newsrvid,
			&i.Newsrvname,
			&i.Scheduledate,
			&i.Requestdate,
			&i.Status,
			&i.Transid,
			&i.Requested,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
