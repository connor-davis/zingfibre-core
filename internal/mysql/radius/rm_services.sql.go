// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_services.sql

package radius

import (
	"context"
)

const getRmService = `-- name: GetRmService :one
SELECT
    srvid, srvname, descr, downrate, uprate, limitdl, limitul, limitcomb, limitexpiration, limituptime, poolname, unitprice, unitpriceadd, timebaseexp, timebaseonline, timeunitexp, timeunitonline, trafficunitdl, trafficunitul, trafficunitcomb, inittimeexp, inittimeonline, initdl, initul, inittotal, srvtype, timeaddmodeexp, timeaddmodeonline, trafficaddmode, monthly, enaddcredits, minamount, minamountadd, resetctrdate, resetctrneg, pricecalcdownload, pricecalcupload, pricecalcuptime, unitpricetax, unitpriceaddtax, enableburst, dlburstlimit, ulburstlimit, dlburstthreshold, ulburstthreshold, dlbursttime, ulbursttime, enableservice, dlquota, ulquota, combquota, timequota, priority, nextsrvid, dailynextsrvid, disnextsrvid, availucp, renew, carryover, policymapdl, policymapul, custattr, gentftp, cmcfg, advcmcfg, addamount, ignstatip
FROM
    rm_services
WHERE
    srvid = ?
LIMIT
    1
`

func (q *Queries) GetRmService(ctx context.Context, srvid int32) (RmService, error) {
	row := q.db.QueryRowContext(ctx, getRmService, srvid)
	var i RmService
	err := row.Scan(
		&i.Srvid,
		&i.Srvname,
		&i.Descr,
		&i.Downrate,
		&i.Uprate,
		&i.Limitdl,
		&i.Limitul,
		&i.Limitcomb,
		&i.Limitexpiration,
		&i.Limituptime,
		&i.Poolname,
		&i.Unitprice,
		&i.Unitpriceadd,
		&i.Timebaseexp,
		&i.Timebaseonline,
		&i.Timeunitexp,
		&i.Timeunitonline,
		&i.Trafficunitdl,
		&i.Trafficunitul,
		&i.Trafficunitcomb,
		&i.Inittimeexp,
		&i.Inittimeonline,
		&i.Initdl,
		&i.Initul,
		&i.Inittotal,
		&i.Srvtype,
		&i.Timeaddmodeexp,
		&i.Timeaddmodeonline,
		&i.Trafficaddmode,
		&i.Monthly,
		&i.Enaddcredits,
		&i.Minamount,
		&i.Minamountadd,
		&i.Resetctrdate,
		&i.Resetctrneg,
		&i.Pricecalcdownload,
		&i.Pricecalcupload,
		&i.Pricecalcuptime,
		&i.Unitpricetax,
		&i.Unitpriceaddtax,
		&i.Enableburst,
		&i.Dlburstlimit,
		&i.Ulburstlimit,
		&i.Dlburstthreshold,
		&i.Ulburstthreshold,
		&i.Dlbursttime,
		&i.Ulbursttime,
		&i.Enableservice,
		&i.Dlquota,
		&i.Ulquota,
		&i.Combquota,
		&i.Timequota,
		&i.Priority,
		&i.Nextsrvid,
		&i.Dailynextsrvid,
		&i.Disnextsrvid,
		&i.Availucp,
		&i.Renew,
		&i.Carryover,
		&i.Policymapdl,
		&i.Policymapul,
		&i.Custattr,
		&i.Gentftp,
		&i.Cmcfg,
		&i.Advcmcfg,
		&i.Addamount,
		&i.Ignstatip,
	)
	return i, err
}

const getRmServices = `-- name: GetRmServices :many
SELECT
    srvid, srvname, descr, downrate, uprate, limitdl, limitul, limitcomb, limitexpiration, limituptime, poolname, unitprice, unitpriceadd, timebaseexp, timebaseonline, timeunitexp, timeunitonline, trafficunitdl, trafficunitul, trafficunitcomb, inittimeexp, inittimeonline, initdl, initul, inittotal, srvtype, timeaddmodeexp, timeaddmodeonline, trafficaddmode, monthly, enaddcredits, minamount, minamountadd, resetctrdate, resetctrneg, pricecalcdownload, pricecalcupload, pricecalcuptime, unitpricetax, unitpriceaddtax, enableburst, dlburstlimit, ulburstlimit, dlburstthreshold, ulburstthreshold, dlbursttime, ulbursttime, enableservice, dlquota, ulquota, combquota, timequota, priority, nextsrvid, dailynextsrvid, disnextsrvid, availucp, renew, carryover, policymapdl, policymapul, custattr, gentftp, cmcfg, advcmcfg, addamount, ignstatip
FROM
    rm_services
LIMIT
    ?
OFFSET
    ?
`

type GetRmServicesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmServices(ctx context.Context, arg GetRmServicesParams) ([]RmService, error) {
	rows, err := q.db.QueryContext(ctx, getRmServices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmService
	for rows.Next() {
		var i RmService
		if err := rows.Scan(
			&i.Srvid,
			&i.Srvname,
			&i.Descr,
			&i.Downrate,
			&i.Uprate,
			&i.Limitdl,
			&i.Limitul,
			&i.Limitcomb,
			&i.Limitexpiration,
			&i.Limituptime,
			&i.Poolname,
			&i.Unitprice,
			&i.Unitpriceadd,
			&i.Timebaseexp,
			&i.Timebaseonline,
			&i.Timeunitexp,
			&i.Timeunitonline,
			&i.Trafficunitdl,
			&i.Trafficunitul,
			&i.Trafficunitcomb,
			&i.Inittimeexp,
			&i.Inittimeonline,
			&i.Initdl,
			&i.Initul,
			&i.Inittotal,
			&i.Srvtype,
			&i.Timeaddmodeexp,
			&i.Timeaddmodeonline,
			&i.Trafficaddmode,
			&i.Monthly,
			&i.Enaddcredits,
			&i.Minamount,
			&i.Minamountadd,
			&i.Resetctrdate,
			&i.Resetctrneg,
			&i.Pricecalcdownload,
			&i.Pricecalcupload,
			&i.Pricecalcuptime,
			&i.Unitpricetax,
			&i.Unitpriceaddtax,
			&i.Enableburst,
			&i.Dlburstlimit,
			&i.Ulburstlimit,
			&i.Dlburstthreshold,
			&i.Ulburstthreshold,
			&i.Dlbursttime,
			&i.Ulbursttime,
			&i.Enableservice,
			&i.Dlquota,
			&i.Ulquota,
			&i.Combquota,
			&i.Timequota,
			&i.Priority,
			&i.Nextsrvid,
			&i.Dailynextsrvid,
			&i.Disnextsrvid,
			&i.Availucp,
			&i.Renew,
			&i.Carryover,
			&i.Policymapdl,
			&i.Policymapul,
			&i.Custattr,
			&i.Gentftp,
			&i.Cmcfg,
			&i.Advcmcfg,
			&i.Addamount,
			&i.Ignstatip,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
