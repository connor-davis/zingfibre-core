// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: radgroupreply.sql

package radius

import (
	"context"
)

const getRadgroupreplies = `-- name: GetRadgroupreplies :many
SELECT
    id, groupname, attribute, op, value
FROM
    radgroupreply
LIMIT
    ?
OFFSET
    ?
`

type GetRadgrouprepliesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRadgroupreplies(ctx context.Context, arg GetRadgrouprepliesParams) ([]Radgroupreply, error) {
	rows, err := q.db.QueryContext(ctx, getRadgroupreplies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Radgroupreply
	for rows.Next() {
		var i Radgroupreply
		if err := rows.Scan(
			&i.ID,
			&i.Groupname,
			&i.Attribute,
			&i.Op,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRadgroupreply = `-- name: GetRadgroupreply :one
SELECT
    id, groupname, attribute, op, value
FROM
    radgroupreply
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRadgroupreply(ctx context.Context, id uint32) (Radgroupreply, error) {
	row := q.db.QueryRowContext(ctx, getRadgroupreply, id)
	var i Radgroupreply
	err := row.Scan(
		&i.ID,
		&i.Groupname,
		&i.Attribute,
		&i.Op,
		&i.Value,
	)
	return i, err
}
