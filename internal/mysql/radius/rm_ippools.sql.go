// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_ippools.sql

package radius

import (
	"context"
)

const getRmIppool = `-- name: GetRmIppool :one
SELECT
    id, type, name, fromip, toip, descr, nextpoolid
FROM
    rm_ippools
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRmIppool(ctx context.Context, id int32) (RmIppool, error) {
	row := q.db.QueryRowContext(ctx, getRmIppool, id)
	var i RmIppool
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.Fromip,
		&i.Toip,
		&i.Descr,
		&i.Nextpoolid,
	)
	return i, err
}

const getRmIppools = `-- name: GetRmIppools :many
SELECT
    id, type, name, fromip, toip, descr, nextpoolid
FROM
    rm_ippools
LIMIT
    ?
OFFSET
    ?
`

type GetRmIppoolsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmIppools(ctx context.Context, arg GetRmIppoolsParams) ([]RmIppool, error) {
	rows, err := q.db.QueryContext(ctx, getRmIppools, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmIppool
	for rows.Next() {
		var i RmIppool
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Name,
			&i.Fromip,
			&i.Toip,
			&i.Descr,
			&i.Nextpoolid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
