// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: radpostauth.sql

package radius

import (
	"context"
)

const getRadpostauth = `-- name: GetRadpostauth :one
SELECT
    id, username, pass, reply, authdate, nasipaddress
FROM
    radpostauth
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRadpostauth(ctx context.Context, id int32) (Radpostauth, error) {
	row := q.db.QueryRowContext(ctx, getRadpostauth, id)
	var i Radpostauth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Pass,
		&i.Reply,
		&i.Authdate,
		&i.Nasipaddress,
	)
	return i, err
}

const getRadpostauths = `-- name: GetRadpostauths :many
SELECT
    id, username, pass, reply, authdate, nasipaddress
FROM
    radpostauth
LIMIT
    ?
OFFSET
    ?
`

type GetRadpostauthsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRadpostauths(ctx context.Context, arg GetRadpostauthsParams) ([]Radpostauth, error) {
	rows, err := q.db.QueryContext(ctx, getRadpostauths, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Radpostauth
	for rows.Next() {
		var i Radpostauth
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Pass,
			&i.Reply,
			&i.Authdate,
			&i.Nasipaddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
