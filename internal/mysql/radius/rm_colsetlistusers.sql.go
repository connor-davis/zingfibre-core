// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_colsetlistusers.sql

package radius

import (
	"context"
)

const getRmColsetlistuser = `-- name: GetRmColsetlistuser :one
SELECT
    managername, colname
FROM
    rm_colsetlistusers
WHERE
    managername = ?
LIMIT
    1
`

func (q *Queries) GetRmColsetlistuser(ctx context.Context, managername string) (RmColsetlistuser, error) {
	row := q.db.QueryRowContext(ctx, getRmColsetlistuser, managername)
	var i RmColsetlistuser
	err := row.Scan(&i.Managername, &i.Colname)
	return i, err
}

const getRmColsetlistusers = `-- name: GetRmColsetlistusers :many
SELECT
    managername, colname
FROM
    rm_colsetlistusers
LIMIT
    ?
OFFSET
    ?
`

type GetRmColsetlistusersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmColsetlistusers(ctx context.Context, arg GetRmColsetlistusersParams) ([]RmColsetlistuser, error) {
	rows, err := q.db.QueryContext(ctx, getRmColsetlistusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmColsetlistuser
	for rows.Next() {
		var i RmColsetlistuser
		if err := rows.Scan(&i.Managername, &i.Colname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
