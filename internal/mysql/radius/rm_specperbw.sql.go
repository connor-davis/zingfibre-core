// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_specperbw.sql

package radius

import (
	"context"
)

const getRmSpecperbw = `-- name: GetRmSpecperbw :one
SELECT
    id, srvid, starttime, endtime, dlrate, ulrate, dlburstlimit, ulburstlimit, dlburstthreshold, ulburstthreshold, dlbursttime, ulbursttime, enableburst, priority, mon, tue, wed, thu, fri, sat, sun
FROM
    rm_specperbw
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRmSpecperbw(ctx context.Context, id int32) (RmSpecperbw, error) {
	row := q.db.QueryRowContext(ctx, getRmSpecperbw, id)
	var i RmSpecperbw
	err := row.Scan(
		&i.ID,
		&i.Srvid,
		&i.Starttime,
		&i.Endtime,
		&i.Dlrate,
		&i.Ulrate,
		&i.Dlburstlimit,
		&i.Ulburstlimit,
		&i.Dlburstthreshold,
		&i.Ulburstthreshold,
		&i.Dlbursttime,
		&i.Ulbursttime,
		&i.Enableburst,
		&i.Priority,
		&i.Mon,
		&i.Tue,
		&i.Wed,
		&i.Thu,
		&i.Fri,
		&i.Sat,
		&i.Sun,
	)
	return i, err
}

const getRmSpecperbws = `-- name: GetRmSpecperbws :many
SELECT
    id, srvid, starttime, endtime, dlrate, ulrate, dlburstlimit, ulburstlimit, dlburstthreshold, ulburstthreshold, dlbursttime, ulbursttime, enableburst, priority, mon, tue, wed, thu, fri, sat, sun
FROM
    rm_specperbw
LIMIT
    ?
OFFSET
    ?
`

type GetRmSpecperbwsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmSpecperbws(ctx context.Context, arg GetRmSpecperbwsParams) ([]RmSpecperbw, error) {
	rows, err := q.db.QueryContext(ctx, getRmSpecperbws, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmSpecperbw
	for rows.Next() {
		var i RmSpecperbw
		if err := rows.Scan(
			&i.ID,
			&i.Srvid,
			&i.Starttime,
			&i.Endtime,
			&i.Dlrate,
			&i.Ulrate,
			&i.Dlburstlimit,
			&i.Ulburstlimit,
			&i.Dlburstthreshold,
			&i.Ulburstthreshold,
			&i.Dlbursttime,
			&i.Ulbursttime,
			&i.Enableburst,
			&i.Priority,
			&i.Mon,
			&i.Tue,
			&i.Wed,
			&i.Thu,
			&i.Fri,
			&i.Sat,
			&i.Sun,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
