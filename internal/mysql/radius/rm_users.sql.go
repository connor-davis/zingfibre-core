// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_users.sql

package radius

import (
	"context"
)

const getRmUser = `-- name: GetRmUser :one
SELECT
    username, password, macpswmode, groupid, enableuser, uplimit, downlimit, comblimit, firstname, lastname, company, phone, mobile, address, city, zip, country, state, comment, gpslat, gpslong, mac, usemacauth, expiration, uptimelimit, srvid, staticipcm, staticipcpe, ipmodecm, ipmodecpe, poolidcm, poolidcpe, createdon, acctype, credits, cardfails, createdby, owner, taxid, cnic, email, maccm, custattr, warningsent, verifycode, verified, selfreg, verifyfails, verifysentnum, verifymobile, contractid, contractvalid, actcode, pswactsmsnum, alertemail, alertsms, lang, lastlogoff, autorenew
FROM
    rm_users
WHERE
    username = ?
LIMIT
    1
`

func (q *Queries) GetRmUser(ctx context.Context, username string) (RmUser, error) {
	row := q.db.QueryRowContext(ctx, getRmUser, username)
	var i RmUser
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Macpswmode,
		&i.Groupid,
		&i.Enableuser,
		&i.Uplimit,
		&i.Downlimit,
		&i.Comblimit,
		&i.Firstname,
		&i.Lastname,
		&i.Company,
		&i.Phone,
		&i.Mobile,
		&i.Address,
		&i.City,
		&i.Zip,
		&i.Country,
		&i.State,
		&i.Comment,
		&i.Gpslat,
		&i.Gpslong,
		&i.Mac,
		&i.Usemacauth,
		&i.Expiration,
		&i.Uptimelimit,
		&i.Srvid,
		&i.Staticipcm,
		&i.Staticipcpe,
		&i.Ipmodecm,
		&i.Ipmodecpe,
		&i.Poolidcm,
		&i.Poolidcpe,
		&i.Createdon,
		&i.Acctype,
		&i.Credits,
		&i.Cardfails,
		&i.Createdby,
		&i.Owner,
		&i.Taxid,
		&i.Cnic,
		&i.Email,
		&i.Maccm,
		&i.Custattr,
		&i.Warningsent,
		&i.Verifycode,
		&i.Verified,
		&i.Selfreg,
		&i.Verifyfails,
		&i.Verifysentnum,
		&i.Verifymobile,
		&i.Contractid,
		&i.Contractvalid,
		&i.Actcode,
		&i.Pswactsmsnum,
		&i.Alertemail,
		&i.Alertsms,
		&i.Lang,
		&i.Lastlogoff,
		&i.Autorenew,
	)
	return i, err
}

const getRmUsers = `-- name: GetRmUsers :many
SELECT
    username, password, macpswmode, groupid, enableuser, uplimit, downlimit, comblimit, firstname, lastname, company, phone, mobile, address, city, zip, country, state, comment, gpslat, gpslong, mac, usemacauth, expiration, uptimelimit, srvid, staticipcm, staticipcpe, ipmodecm, ipmodecpe, poolidcm, poolidcpe, createdon, acctype, credits, cardfails, createdby, owner, taxid, cnic, email, maccm, custattr, warningsent, verifycode, verified, selfreg, verifyfails, verifysentnum, verifymobile, contractid, contractvalid, actcode, pswactsmsnum, alertemail, alertsms, lang, lastlogoff, autorenew
FROM
    rm_users
LIMIT
    ?
OFFSET
    ?
`

type GetRmUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmUsers(ctx context.Context, arg GetRmUsersParams) ([]RmUser, error) {
	rows, err := q.db.QueryContext(ctx, getRmUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmUser
	for rows.Next() {
		var i RmUser
		if err := rows.Scan(
			&i.Username,
			&i.Password,
			&i.Macpswmode,
			&i.Groupid,
			&i.Enableuser,
			&i.Uplimit,
			&i.Downlimit,
			&i.Comblimit,
			&i.Firstname,
			&i.Lastname,
			&i.Company,
			&i.Phone,
			&i.Mobile,
			&i.Address,
			&i.City,
			&i.Zip,
			&i.Country,
			&i.State,
			&i.Comment,
			&i.Gpslat,
			&i.Gpslong,
			&i.Mac,
			&i.Usemacauth,
			&i.Expiration,
			&i.Uptimelimit,
			&i.Srvid,
			&i.Staticipcm,
			&i.Staticipcpe,
			&i.Ipmodecm,
			&i.Ipmodecpe,
			&i.Poolidcm,
			&i.Poolidcpe,
			&i.Createdon,
			&i.Acctype,
			&i.Credits,
			&i.Cardfails,
			&i.Createdby,
			&i.Owner,
			&i.Taxid,
			&i.Cnic,
			&i.Email,
			&i.Maccm,
			&i.Custattr,
			&i.Warningsent,
			&i.Verifycode,
			&i.Verified,
			&i.Selfreg,
			&i.Verifyfails,
			&i.Verifysentnum,
			&i.Verifymobile,
			&i.Contractid,
			&i.Contractvalid,
			&i.Actcode,
			&i.Pswactsmsnum,
			&i.Alertemail,
			&i.Alertsms,
			&i.Lang,
			&i.Lastlogoff,
			&i.Autorenew,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
