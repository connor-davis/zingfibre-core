// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_colsetlistdocsis.sql

package radius

import (
	"context"
)

const getRmColsetlistdocsis = `-- name: GetRmColsetlistdocsis :one
SELECT
    managername, colname
FROM
    rm_colsetlistdocsis
WHERE
    managername = ?
LIMIT
    1
`

func (q *Queries) GetRmColsetlistdocsis(ctx context.Context, managername string) (RmColsetlistdocsi, error) {
	row := q.db.QueryRowContext(ctx, getRmColsetlistdocsis, managername)
	var i RmColsetlistdocsi
	err := row.Scan(&i.Managername, &i.Colname)
	return i, err
}

const getRmColsetlistdocsises = `-- name: GetRmColsetlistdocsises :many
SELECT
    managername, colname
FROM
    rm_colsetlistdocsis
LIMIT
    ?
OFFSET
    ?
`

type GetRmColsetlistdocsisesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmColsetlistdocsises(ctx context.Context, arg GetRmColsetlistdocsisesParams) ([]RmColsetlistdocsi, error) {
	rows, err := q.db.QueryContext(ctx, getRmColsetlistdocsises, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmColsetlistdocsi
	for rows.Next() {
		var i RmColsetlistdocsi
		if err := rows.Scan(&i.Managername, &i.Colname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
