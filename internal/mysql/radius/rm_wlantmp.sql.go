// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_wlantmp.sql

package radius

import (
	"context"
	"database/sql"
)

const getRmWlantmp = `-- name: GetRmWlantmp :one
SELECT
    maccpe, uspwr, ccq, snr, apip, timestamp
FROM
    rm_wlantmp
WHERE
    maccpe = ?
LIMIT
    1
`

func (q *Queries) GetRmWlantmp(ctx context.Context, maccpe sql.NullString) (RmWlantmp, error) {
	row := q.db.QueryRowContext(ctx, getRmWlantmp, maccpe)
	var i RmWlantmp
	err := row.Scan(
		&i.Maccpe,
		&i.Uspwr,
		&i.Ccq,
		&i.Snr,
		&i.Apip,
		&i.Timestamp,
	)
	return i, err
}

const getRmWlantmps = `-- name: GetRmWlantmps :many
SELECT
    maccpe, uspwr, ccq, snr, apip, timestamp
FROM
    rm_wlantmp
LIMIT
    ?
OFFSET
    ?
`

type GetRmWlantmpsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmWlantmps(ctx context.Context, arg GetRmWlantmpsParams) ([]RmWlantmp, error) {
	rows, err := q.db.QueryContext(ctx, getRmWlantmps, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmWlantmp
	for rows.Next() {
		var i RmWlantmp
		if err := rows.Scan(
			&i.Maccpe,
			&i.Uspwr,
			&i.Ccq,
			&i.Snr,
			&i.Apip,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
