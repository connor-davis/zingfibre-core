// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_onlinecm.sql

package radius

import (
	"context"
)

const getRmOnlinecm = `-- name: GetRmOnlinecm :one
SELECT
    username, maccm, enableuser, staticipcm, maccpe, ipcpe, ipmodecpe, cmtsid, groupid, groupname, dlbytes, ulbytes, snrds, snrus, txpwr, rxpwr, pingtime, uptime, loss, dsname, usname, dsifidx, usifidx, timestamp
FROM
    rm_onlinecm
WHERE
    username = ?
LIMIT
    1
`

func (q *Queries) GetRmOnlinecm(ctx context.Context, username string) (RmOnlinecm, error) {
	row := q.db.QueryRowContext(ctx, getRmOnlinecm, username)
	var i RmOnlinecm
	err := row.Scan(
		&i.Username,
		&i.Maccm,
		&i.Enableuser,
		&i.Staticipcm,
		&i.Maccpe,
		&i.Ipcpe,
		&i.Ipmodecpe,
		&i.Cmtsid,
		&i.Groupid,
		&i.Groupname,
		&i.Dlbytes,
		&i.Ulbytes,
		&i.Snrds,
		&i.Snrus,
		&i.Txpwr,
		&i.Rxpwr,
		&i.Pingtime,
		&i.Uptime,
		&i.Loss,
		&i.Dsname,
		&i.Usname,
		&i.Dsifidx,
		&i.Usifidx,
		&i.Timestamp,
	)
	return i, err
}

const getRmOnlinecms = `-- name: GetRmOnlinecms :many
SELECT
    username, maccm, enableuser, staticipcm, maccpe, ipcpe, ipmodecpe, cmtsid, groupid, groupname, dlbytes, ulbytes, snrds, snrus, txpwr, rxpwr, pingtime, uptime, loss, dsname, usname, dsifidx, usifidx, timestamp
FROM
    rm_onlinecm
LIMIT
    ?
OFFSET
    ?
`

type GetRmOnlinecmsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmOnlinecms(ctx context.Context, arg GetRmOnlinecmsParams) ([]RmOnlinecm, error) {
	rows, err := q.db.QueryContext(ctx, getRmOnlinecms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmOnlinecm
	for rows.Next() {
		var i RmOnlinecm
		if err := rows.Scan(
			&i.Username,
			&i.Maccm,
			&i.Enableuser,
			&i.Staticipcm,
			&i.Maccpe,
			&i.Ipcpe,
			&i.Ipmodecpe,
			&i.Cmtsid,
			&i.Groupid,
			&i.Groupname,
			&i.Dlbytes,
			&i.Ulbytes,
			&i.Snrds,
			&i.Snrus,
			&i.Txpwr,
			&i.Rxpwr,
			&i.Pingtime,
			&i.Uptime,
			&i.Loss,
			&i.Dsname,
			&i.Usname,
			&i.Dsifidx,
			&i.Usifidx,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
