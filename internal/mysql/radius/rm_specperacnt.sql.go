// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_specperacnt.sql

package radius

import (
	"context"
)

const getRmSpecperacnt = `-- name: GetRmSpecperacnt :one
SELECT
    id, srvid, starttime, endtime, timeratio, dlratio, ulratio, connallowed, mon, tue, wed, thu, fri, sat, sun
FROM
    rm_specperacnt
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRmSpecperacnt(ctx context.Context, id int32) (RmSpecperacnt, error) {
	row := q.db.QueryRowContext(ctx, getRmSpecperacnt, id)
	var i RmSpecperacnt
	err := row.Scan(
		&i.ID,
		&i.Srvid,
		&i.Starttime,
		&i.Endtime,
		&i.Timeratio,
		&i.Dlratio,
		&i.Ulratio,
		&i.Connallowed,
		&i.Mon,
		&i.Tue,
		&i.Wed,
		&i.Thu,
		&i.Fri,
		&i.Sat,
		&i.Sun,
	)
	return i, err
}

const getRmSpecperacnts = `-- name: GetRmSpecperacnts :many
SELECT
    id, srvid, starttime, endtime, timeratio, dlratio, ulratio, connallowed, mon, tue, wed, thu, fri, sat, sun
FROM
    rm_specperacnt
LIMIT
    ?
OFFSET
    ?
`

type GetRmSpecperacntsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmSpecperacnts(ctx context.Context, arg GetRmSpecperacntsParams) ([]RmSpecperacnt, error) {
	rows, err := q.db.QueryContext(ctx, getRmSpecperacnts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmSpecperacnt
	for rows.Next() {
		var i RmSpecperacnt
		if err := rows.Scan(
			&i.ID,
			&i.Srvid,
			&i.Starttime,
			&i.Endtime,
			&i.Timeratio,
			&i.Dlratio,
			&i.Ulratio,
			&i.Connallowed,
			&i.Mon,
			&i.Tue,
			&i.Wed,
			&i.Thu,
			&i.Fri,
			&i.Sat,
			&i.Sun,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
