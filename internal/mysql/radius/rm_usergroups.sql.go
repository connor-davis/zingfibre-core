// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_usergroups.sql

package radius

import (
	"context"
)

const getRmUsergroup = `-- name: GetRmUsergroup :one
SELECT
    groupid, groupname, descr
FROM
    rm_usergroups
WHERE
    groupid = ?
LIMIT
    1
`

func (q *Queries) GetRmUsergroup(ctx context.Context, groupid int32) (RmUsergroup, error) {
	row := q.db.QueryRowContext(ctx, getRmUsergroup, groupid)
	var i RmUsergroup
	err := row.Scan(&i.Groupid, &i.Groupname, &i.Descr)
	return i, err
}

const getRmUsergroups = `-- name: GetRmUsergroups :many
SELECT
    groupid, groupname, descr
FROM
    rm_usergroups
LIMIT
    ?
OFFSET
    ?
`

type GetRmUsergroupsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmUsergroups(ctx context.Context, arg GetRmUsergroupsParams) ([]RmUsergroup, error) {
	rows, err := q.db.QueryContext(ctx, getRmUsergroups, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmUsergroup
	for rows.Next() {
		var i RmUsergroup
		if err := rows.Scan(&i.Groupid, &i.Groupname, &i.Descr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
