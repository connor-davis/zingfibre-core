// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_settings.sql

package radius

import (
	"context"
)

const getRmSetting = `-- name: GetRmSetting :one
SELECT
    currency, unixacc, diskquota, quotatpl, paymentopt, changesrv, vatpercent, advtaxpercent, disablenotpaid, disableexpcont, resetctr, newnasallsrv, newmanallsrv, disconnmethod, warndl, warndlpercent, warnul, warnulpercent, warncomb, warncombpercent, warnuptime, warnuptimepercent, warnexpiry, expalertmode, emailselfregman, emailwelcome, emailnewsrv, smsnewsrv, emailrenew, smsrenew, emailexpiry, smswelcome, smsexpiry, warnmode, selfreg, edituserdata, hidelimits, pm_internal, pm_paypalstd, pm_paypalpro, pm_paypalexp, pm_netcash, pm_authorizenet, pm_dps, pm_2co, pm_payfast, pm_payu, pm_paytm, pm_bkash, pm_flutterwave, pm_easypay, pm_mpesa, pm_custom, unixhost, remotehostname, maclock, billingstart, disconnpostpaid, renewday, changepswucp, redeemucp, buycreditsucp, buydepositucp, reg_firstname, reg_lastname, reg_address, reg_city, reg_zip, reg_country, reg_state, reg_phone, reg_mobile, reg_email, reg_vatid, reg_cnic, selfreg_firstname, selfreg_lastname, selfreg_address, selfreg_city, selfreg_zip, selfreg_country, selfreg_state, selfreg_phone, selfreg_mobile, selfreg_email, selfreg_mobactsms, selfreg_nameactemail, selfreg_nameactsms, selfreg_endupemail, selfreg_endupmobile, selfreg_vatid, ias_email, ias_mobile, ias_verify, ias_endupemail, ias_endupmobile, simuseselfreg, defgrpid, captcha, discontime
FROM
    rm_settings
LIMIT
    1
`

func (q *Queries) GetRmSetting(ctx context.Context) (RmSetting, error) {
	row := q.db.QueryRowContext(ctx, getRmSetting)
	var i RmSetting
	err := row.Scan(
		&i.Currency,
		&i.Unixacc,
		&i.Diskquota,
		&i.Quotatpl,
		&i.Paymentopt,
		&i.Changesrv,
		&i.Vatpercent,
		&i.Advtaxpercent,
		&i.Disablenotpaid,
		&i.Disableexpcont,
		&i.Resetctr,
		&i.Newnasallsrv,
		&i.Newmanallsrv,
		&i.Disconnmethod,
		&i.Warndl,
		&i.Warndlpercent,
		&i.Warnul,
		&i.Warnulpercent,
		&i.Warncomb,
		&i.Warncombpercent,
		&i.Warnuptime,
		&i.Warnuptimepercent,
		&i.Warnexpiry,
		&i.Expalertmode,
		&i.Emailselfregman,
		&i.Emailwelcome,
		&i.Emailnewsrv,
		&i.Smsnewsrv,
		&i.Emailrenew,
		&i.Smsrenew,
		&i.Emailexpiry,
		&i.Smswelcome,
		&i.Smsexpiry,
		&i.Warnmode,
		&i.Selfreg,
		&i.Edituserdata,
		&i.Hidelimits,
		&i.PmInternal,
		&i.PmPaypalstd,
		&i.PmPaypalpro,
		&i.PmPaypalexp,
		&i.PmNetcash,
		&i.PmAuthorizenet,
		&i.PmDps,
		&i.Pm2co,
		&i.PmPayfast,
		&i.PmPayu,
		&i.PmPaytm,
		&i.PmBkash,
		&i.PmFlutterwave,
		&i.PmEasypay,
		&i.PmMpesa,
		&i.PmCustom,
		&i.Unixhost,
		&i.Remotehostname,
		&i.Maclock,
		&i.Billingstart,
		&i.Disconnpostpaid,
		&i.Renewday,
		&i.Changepswucp,
		&i.Redeemucp,
		&i.Buycreditsucp,
		&i.Buydepositucp,
		&i.RegFirstname,
		&i.RegLastname,
		&i.RegAddress,
		&i.RegCity,
		&i.RegZip,
		&i.RegCountry,
		&i.RegState,
		&i.RegPhone,
		&i.RegMobile,
		&i.RegEmail,
		&i.RegVatid,
		&i.RegCnic,
		&i.SelfregFirstname,
		&i.SelfregLastname,
		&i.SelfregAddress,
		&i.SelfregCity,
		&i.SelfregZip,
		&i.SelfregCountry,
		&i.SelfregState,
		&i.SelfregPhone,
		&i.SelfregMobile,
		&i.SelfregEmail,
		&i.SelfregMobactsms,
		&i.SelfregNameactemail,
		&i.SelfregNameactsms,
		&i.SelfregEndupemail,
		&i.SelfregEndupmobile,
		&i.SelfregVatid,
		&i.IasEmail,
		&i.IasMobile,
		&i.IasVerify,
		&i.IasEndupemail,
		&i.IasEndupmobile,
		&i.Simuseselfreg,
		&i.Defgrpid,
		&i.Captcha,
		&i.Discontime,
	)
	return i, err
}

const getRmSettings = `-- name: GetRmSettings :many
SELECT
    currency, unixacc, diskquota, quotatpl, paymentopt, changesrv, vatpercent, advtaxpercent, disablenotpaid, disableexpcont, resetctr, newnasallsrv, newmanallsrv, disconnmethod, warndl, warndlpercent, warnul, warnulpercent, warncomb, warncombpercent, warnuptime, warnuptimepercent, warnexpiry, expalertmode, emailselfregman, emailwelcome, emailnewsrv, smsnewsrv, emailrenew, smsrenew, emailexpiry, smswelcome, smsexpiry, warnmode, selfreg, edituserdata, hidelimits, pm_internal, pm_paypalstd, pm_paypalpro, pm_paypalexp, pm_netcash, pm_authorizenet, pm_dps, pm_2co, pm_payfast, pm_payu, pm_paytm, pm_bkash, pm_flutterwave, pm_easypay, pm_mpesa, pm_custom, unixhost, remotehostname, maclock, billingstart, disconnpostpaid, renewday, changepswucp, redeemucp, buycreditsucp, buydepositucp, reg_firstname, reg_lastname, reg_address, reg_city, reg_zip, reg_country, reg_state, reg_phone, reg_mobile, reg_email, reg_vatid, reg_cnic, selfreg_firstname, selfreg_lastname, selfreg_address, selfreg_city, selfreg_zip, selfreg_country, selfreg_state, selfreg_phone, selfreg_mobile, selfreg_email, selfreg_mobactsms, selfreg_nameactemail, selfreg_nameactsms, selfreg_endupemail, selfreg_endupmobile, selfreg_vatid, ias_email, ias_mobile, ias_verify, ias_endupemail, ias_endupmobile, simuseselfreg, defgrpid, captcha, discontime
FROM
    rm_settings
LIMIT
    ?
OFFSET
    ?
`

type GetRmSettingsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmSettings(ctx context.Context, arg GetRmSettingsParams) ([]RmSetting, error) {
	rows, err := q.db.QueryContext(ctx, getRmSettings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmSetting
	for rows.Next() {
		var i RmSetting
		if err := rows.Scan(
			&i.Currency,
			&i.Unixacc,
			&i.Diskquota,
			&i.Quotatpl,
			&i.Paymentopt,
			&i.Changesrv,
			&i.Vatpercent,
			&i.Advtaxpercent,
			&i.Disablenotpaid,
			&i.Disableexpcont,
			&i.Resetctr,
			&i.Newnasallsrv,
			&i.Newmanallsrv,
			&i.Disconnmethod,
			&i.Warndl,
			&i.Warndlpercent,
			&i.Warnul,
			&i.Warnulpercent,
			&i.Warncomb,
			&i.Warncombpercent,
			&i.Warnuptime,
			&i.Warnuptimepercent,
			&i.Warnexpiry,
			&i.Expalertmode,
			&i.Emailselfregman,
			&i.Emailwelcome,
			&i.Emailnewsrv,
			&i.Smsnewsrv,
			&i.Emailrenew,
			&i.Smsrenew,
			&i.Emailexpiry,
			&i.Smswelcome,
			&i.Smsexpiry,
			&i.Warnmode,
			&i.Selfreg,
			&i.Edituserdata,
			&i.Hidelimits,
			&i.PmInternal,
			&i.PmPaypalstd,
			&i.PmPaypalpro,
			&i.PmPaypalexp,
			&i.PmNetcash,
			&i.PmAuthorizenet,
			&i.PmDps,
			&i.Pm2co,
			&i.PmPayfast,
			&i.PmPayu,
			&i.PmPaytm,
			&i.PmBkash,
			&i.PmFlutterwave,
			&i.PmEasypay,
			&i.PmMpesa,
			&i.PmCustom,
			&i.Unixhost,
			&i.Remotehostname,
			&i.Maclock,
			&i.Billingstart,
			&i.Disconnpostpaid,
			&i.Renewday,
			&i.Changepswucp,
			&i.Redeemucp,
			&i.Buycreditsucp,
			&i.Buydepositucp,
			&i.RegFirstname,
			&i.RegLastname,
			&i.RegAddress,
			&i.RegCity,
			&i.RegZip,
			&i.RegCountry,
			&i.RegState,
			&i.RegPhone,
			&i.RegMobile,
			&i.RegEmail,
			&i.RegVatid,
			&i.RegCnic,
			&i.SelfregFirstname,
			&i.SelfregLastname,
			&i.SelfregAddress,
			&i.SelfregCity,
			&i.SelfregZip,
			&i.SelfregCountry,
			&i.SelfregState,
			&i.SelfregPhone,
			&i.SelfregMobile,
			&i.SelfregEmail,
			&i.SelfregMobactsms,
			&i.SelfregNameactemail,
			&i.SelfregNameactsms,
			&i.SelfregEndupemail,
			&i.SelfregEndupmobile,
			&i.SelfregVatid,
			&i.IasEmail,
			&i.IasMobile,
			&i.IasVerify,
			&i.IasEndupemail,
			&i.IasEndupmobile,
			&i.Simuseselfreg,
			&i.Defgrpid,
			&i.Captcha,
			&i.Discontime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
