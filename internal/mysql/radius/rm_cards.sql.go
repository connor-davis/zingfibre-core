// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_cards.sql

package radius

import (
	"context"
)

const getRmCard = `-- name: GetRmCard :one
SELECT
    id, cardnum, password, value, expiration, series, date, owner, used, cardtype, revoked, downlimit, uplimit, comblimit, uptimelimit, srvid, transid, active, expiretime, timebaseexp, timebaseonline
FROM
    rm_cards
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRmCard(ctx context.Context, id int64) (RmCard, error) {
	row := q.db.QueryRowContext(ctx, getRmCard, id)
	var i RmCard
	err := row.Scan(
		&i.ID,
		&i.Cardnum,
		&i.Password,
		&i.Value,
		&i.Expiration,
		&i.Series,
		&i.Date,
		&i.Owner,
		&i.Used,
		&i.Cardtype,
		&i.Revoked,
		&i.Downlimit,
		&i.Uplimit,
		&i.Comblimit,
		&i.Uptimelimit,
		&i.Srvid,
		&i.Transid,
		&i.Active,
		&i.Expiretime,
		&i.Timebaseexp,
		&i.Timebaseonline,
	)
	return i, err
}

const getRmCards = `-- name: GetRmCards :many
SELECT
    id, cardnum, password, value, expiration, series, date, owner, used, cardtype, revoked, downlimit, uplimit, comblimit, uptimelimit, srvid, transid, active, expiretime, timebaseexp, timebaseonline
FROM
    rm_cards
LIMIT
    ?
OFFSET
    ?
`

type GetRmCardsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmCards(ctx context.Context, arg GetRmCardsParams) ([]RmCard, error) {
	rows, err := q.db.QueryContext(ctx, getRmCards, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmCard
	for rows.Next() {
		var i RmCard
		if err := rows.Scan(
			&i.ID,
			&i.Cardnum,
			&i.Password,
			&i.Value,
			&i.Expiration,
			&i.Series,
			&i.Date,
			&i.Owner,
			&i.Used,
			&i.Cardtype,
			&i.Revoked,
			&i.Downlimit,
			&i.Uplimit,
			&i.Comblimit,
			&i.Uptimelimit,
			&i.Srvid,
			&i.Transid,
			&i.Active,
			&i.Expiretime,
			&i.Timebaseexp,
			&i.Timebaseonline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
