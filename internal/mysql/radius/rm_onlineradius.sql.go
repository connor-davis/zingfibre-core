// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_onlineradius.sql

package radius

import (
	"context"
)

const getRmOnlineradius = `-- name: GetRmOnlineradius :one
SELECT
    rtt, loss, username, cid, cpeip
FROM
    rm_onlineradius
WHERE
    username = ?
LIMIT
    1
`

func (q *Queries) GetRmOnlineradius(ctx context.Context, username string) (RmOnlineradiu, error) {
	row := q.db.QueryRowContext(ctx, getRmOnlineradius, username)
	var i RmOnlineradiu
	err := row.Scan(
		&i.Rtt,
		&i.Loss,
		&i.Username,
		&i.Cid,
		&i.Cpeip,
	)
	return i, err
}

const getRmOnlineradiuses = `-- name: GetRmOnlineradiuses :many
SELECT
    rtt, loss, username, cid, cpeip
FROM
    rm_onlineradius
LIMIT
    ?
OFFSET
    ?
`

type GetRmOnlineradiusesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmOnlineradiuses(ctx context.Context, arg GetRmOnlineradiusesParams) ([]RmOnlineradiu, error) {
	rows, err := q.db.QueryContext(ctx, getRmOnlineradiuses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmOnlineradiu
	for rows.Next() {
		var i RmOnlineradiu
		if err := rows.Scan(
			&i.Rtt,
			&i.Loss,
			&i.Username,
			&i.Cid,
			&i.Cpeip,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
