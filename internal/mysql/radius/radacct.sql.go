// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: radacct.sql

package radius

import (
	"context"
)

const getRadacct = `-- name: GetRadacct :one
SELECT
    radacctid, acctsessionid, acctuniqueid, username, groupname, realm, nasipaddress, nasportid, nasporttype, acctstarttime, acctstoptime, acctsessiontime, acctauthentic, connectinfo_start, connectinfo_stop, acctinputoctets, acctoutputoctets, calledstationid, callingstationid, acctterminatecause, servicetype, framedprotocol, framedipaddress, acctstartdelay, acctstopdelay, xascendsessionsvrkey, _accttime, _srvid, _dailynextsrvactive, _apid, qcreated
FROM
    radacct
WHERE
    radacctid = ?
LIMIT
    1
`

func (q *Queries) GetRadacct(ctx context.Context, radacctid int64) (Radacct, error) {
	row := q.db.QueryRowContext(ctx, getRadacct, radacctid)
	var i Radacct
	err := row.Scan(
		&i.Radacctid,
		&i.Acctsessionid,
		&i.Acctuniqueid,
		&i.Username,
		&i.Groupname,
		&i.Realm,
		&i.Nasipaddress,
		&i.Nasportid,
		&i.Nasporttype,
		&i.Acctstarttime,
		&i.Acctstoptime,
		&i.Acctsessiontime,
		&i.Acctauthentic,
		&i.ConnectinfoStart,
		&i.ConnectinfoStop,
		&i.Acctinputoctets,
		&i.Acctoutputoctets,
		&i.Calledstationid,
		&i.Callingstationid,
		&i.Acctterminatecause,
		&i.Servicetype,
		&i.Framedprotocol,
		&i.Framedipaddress,
		&i.Acctstartdelay,
		&i.Acctstopdelay,
		&i.Xascendsessionsvrkey,
		&i.Accttime,
		&i.Srvid,
		&i.Dailynextsrvactive,
		&i.Apid,
		&i.Qcreated,
	)
	return i, err
}

const getRadaccts = `-- name: GetRadaccts :many
SELECT
    radacctid, acctsessionid, acctuniqueid, username, groupname, realm, nasipaddress, nasportid, nasporttype, acctstarttime, acctstoptime, acctsessiontime, acctauthentic, connectinfo_start, connectinfo_stop, acctinputoctets, acctoutputoctets, calledstationid, callingstationid, acctterminatecause, servicetype, framedprotocol, framedipaddress, acctstartdelay, acctstopdelay, xascendsessionsvrkey, _accttime, _srvid, _dailynextsrvactive, _apid, qcreated
FROM
    radacct
LIMIT
    ?
OFFSET
    ?
`

type GetRadacctsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRadaccts(ctx context.Context, arg GetRadacctsParams) ([]Radacct, error) {
	rows, err := q.db.QueryContext(ctx, getRadaccts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Radacct
	for rows.Next() {
		var i Radacct
		if err := rows.Scan(
			&i.Radacctid,
			&i.Acctsessionid,
			&i.Acctuniqueid,
			&i.Username,
			&i.Groupname,
			&i.Realm,
			&i.Nasipaddress,
			&i.Nasportid,
			&i.Nasporttype,
			&i.Acctstarttime,
			&i.Acctstoptime,
			&i.Acctsessiontime,
			&i.Acctauthentic,
			&i.ConnectinfoStart,
			&i.ConnectinfoStop,
			&i.Acctinputoctets,
			&i.Acctoutputoctets,
			&i.Calledstationid,
			&i.Callingstationid,
			&i.Acctterminatecause,
			&i.Servicetype,
			&i.Framedprotocol,
			&i.Framedipaddress,
			&i.Acctstartdelay,
			&i.Acctstopdelay,
			&i.Xascendsessionsvrkey,
			&i.Accttime,
			&i.Srvid,
			&i.Dailynextsrvactive,
			&i.Apid,
			&i.Qcreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
