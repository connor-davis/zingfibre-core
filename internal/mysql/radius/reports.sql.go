// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reports.sql

package radius

import (
	"context"
	"database/sql"
)

const getReportsExpiringCustomers = `-- name: GetReportsExpiringCustomers :many
SELECT
    username,
    expiration
FROM
    rm_users
WHERE
    expiration IS NOT NULL
`

type GetReportsExpiringCustomersRow struct {
	Username   string
	Expiration sql.NullTime
}

func (q *Queries) GetReportsExpiringCustomers(ctx context.Context) ([]GetReportsExpiringCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportsExpiringCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportsExpiringCustomersRow
	for rows.Next() {
		var i GetReportsExpiringCustomersRow
		if err := rows.Scan(&i.Username, &i.Expiration); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportsTotalExpiringCustomers = `-- name: GetReportsTotalExpiringCustomers :one
SELECT
    COUNT(*) AS total_expiring_customers
FROM
    rm_users
WHERE
    expiration IS NOT NULL
`

func (q *Queries) GetReportsTotalExpiringCustomers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getReportsTotalExpiringCustomers)
	var total_expiring_customers int64
	err := row.Scan(&total_expiring_customers)
	return total_expiring_customers, err
}
