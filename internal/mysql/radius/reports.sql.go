// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reports.sql

package radius

import (
	"context"
	"database/sql"
)

const getReportsExpiringCustomers = `-- name: GetReportsExpiringCustomers :many
SELECT
    username,
    expiration,
    address
FROM
    rm_users
WHERE
    TRIM(LOWER(username)) LIKE CONCAT(TRIM(LOWER(?)), '%')
`

type GetReportsExpiringCustomersRow struct {
	Username   string
	Expiration sql.NullTime
	Address    string
}

func (q *Queries) GetReportsExpiringCustomers(ctx context.Context, poi string) ([]GetReportsExpiringCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportsExpiringCustomers, poi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportsExpiringCustomersRow
	for rows.Next() {
		var i GetReportsExpiringCustomersRow
		if err := rows.Scan(&i.Username, &i.Expiration, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportsUnregisteredCustomers = `-- name: GetReportsUnregisteredCustomers :many
SELECT
    username,
    expiration,
    address
FROM rm_users
WHERE
    lastlogoff IS NOT NULL
`

type GetReportsUnregisteredCustomersRow struct {
	Username   string
	Expiration sql.NullTime
	Address    string
}

func (q *Queries) GetReportsUnregisteredCustomers(ctx context.Context) ([]GetReportsUnregisteredCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportsUnregisteredCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportsUnregisteredCustomersRow
	for rows.Next() {
		var i GetReportsUnregisteredCustomersRow
		if err := rows.Scan(&i.Username, &i.Expiration, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
