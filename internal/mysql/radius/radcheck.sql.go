// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: radcheck.sql

package radius

import (
	"context"
)

const getRadcheck = `-- name: GetRadcheck :one
SELECT
    id, username, attribute, op, value
FROM
    radcheck
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRadcheck(ctx context.Context, id uint32) (Radcheck, error) {
	row := q.db.QueryRowContext(ctx, getRadcheck, id)
	var i Radcheck
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Attribute,
		&i.Op,
		&i.Value,
	)
	return i, err
}

const getRadchecks = `-- name: GetRadchecks :many
SELECT
    id, username, attribute, op, value
FROM
    radcheck
LIMIT
    ?
OFFSET
    ?
`

type GetRadchecksParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRadchecks(ctx context.Context, arg GetRadchecksParams) ([]Radcheck, error) {
	rows, err := q.db.QueryContext(ctx, getRadchecks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Radcheck
	for rows.Next() {
		var i Radcheck
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Attribute,
			&i.Op,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
