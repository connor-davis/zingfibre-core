// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_syslog.sql

package radius

import (
	"context"
)

const getRmSyslog = `-- name: GetRmSyslog :one
SELECT
    id, datetime, ip, name, eventid, data1
FROM
    rm_syslog
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRmSyslog(ctx context.Context, id int32) (RmSyslog, error) {
	row := q.db.QueryRowContext(ctx, getRmSyslog, id)
	var i RmSyslog
	err := row.Scan(
		&i.ID,
		&i.Datetime,
		&i.Ip,
		&i.Name,
		&i.Eventid,
		&i.Data1,
	)
	return i, err
}

const getRmSyslogs = `-- name: GetRmSyslogs :many
SELECT
    id, datetime, ip, name, eventid, data1
FROM
    rm_syslog
LIMIT
    ?
OFFSET
    ?
`

type GetRmSyslogsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmSyslogs(ctx context.Context, arg GetRmSyslogsParams) ([]RmSyslog, error) {
	rows, err := q.db.QueryContext(ctx, getRmSyslogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmSyslog
	for rows.Next() {
		var i RmSyslog
		if err := rows.Scan(
			&i.ID,
			&i.Datetime,
			&i.Ip,
			&i.Name,
			&i.Eventid,
			&i.Data1,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
