// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_actsrv.sql

package radius

import (
	"context"
)

const getRmActsrv = `-- name: GetRmActsrv :one
SELECT
    id, datetime, username, srvid, dailynextsrvactive
FROM
    rm_actsrv
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRmActsrv(ctx context.Context, id int64) (RmActsrv, error) {
	row := q.db.QueryRowContext(ctx, getRmActsrv, id)
	var i RmActsrv
	err := row.Scan(
		&i.ID,
		&i.Datetime,
		&i.Username,
		&i.Srvid,
		&i.Dailynextsrvactive,
	)
	return i, err
}

const getRmActsrvs = `-- name: GetRmActsrvs :many
SELECT
    id, datetime, username, srvid, dailynextsrvactive
FROM
    rm_actsrv
LIMIT
    ?
OFFSET
    ?
`

type GetRmActsrvsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmActsrvs(ctx context.Context, arg GetRmActsrvsParams) ([]RmActsrv, error) {
	rows, err := q.db.QueryContext(ctx, getRmActsrvs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmActsrv
	for rows.Next() {
		var i RmActsrv
		if err := rows.Scan(
			&i.ID,
			&i.Datetime,
			&i.Username,
			&i.Srvid,
			&i.Dailynextsrvactive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
