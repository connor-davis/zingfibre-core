// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: radippool.sql

package radius

import (
	"context"
)

const getRadippool = `-- name: GetRadippool :one
SELECT
    id, pool_name, framedipaddress, nasipaddress, calledstationid, callingstationid, expiry_time, username, pool_key
FROM
    radippool
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRadippool(ctx context.Context, id uint32) (Radippool, error) {
	row := q.db.QueryRowContext(ctx, getRadippool, id)
	var i Radippool
	err := row.Scan(
		&i.ID,
		&i.PoolName,
		&i.Framedipaddress,
		&i.Nasipaddress,
		&i.Calledstationid,
		&i.Callingstationid,
		&i.ExpiryTime,
		&i.Username,
		&i.PoolKey,
	)
	return i, err
}

const getRadippools = `-- name: GetRadippools :many
SELECT
    id, pool_name, framedipaddress, nasipaddress, calledstationid, callingstationid, expiry_time, username, pool_key
FROM
    radippool
LIMIT
    ?
OFFSET
    ?
`

type GetRadippoolsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRadippools(ctx context.Context, arg GetRadippoolsParams) ([]Radippool, error) {
	rows, err := q.db.QueryContext(ctx, getRadippools, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Radippool
	for rows.Next() {
		var i Radippool
		if err := rows.Scan(
			&i.ID,
			&i.PoolName,
			&i.Framedipaddress,
			&i.Nasipaddress,
			&i.Calledstationid,
			&i.Callingstationid,
			&i.ExpiryTime,
			&i.Username,
			&i.PoolKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
