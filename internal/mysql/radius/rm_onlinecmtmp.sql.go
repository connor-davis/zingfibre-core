// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_onlinecmtmp.sql

package radius

import (
	"context"
)

const getRmOnlinecmtmp = `-- name: GetRmOnlinecmtmp :one
SELECT
    username, maccm, cmidx, cmstat, enableuser, staticipcm, maccpe, ipcpe, ipmodecpe, cmtsid, cmtsip, groupid, groupname, dlbytes, ulbytes, snrds, snrus, txpwr, rxpwr, pingtime, uptime, loss, dsname, usname, dsifidx, usifidx, timestamp
FROM
    rm_onlinecmtmp
WHERE
    username = ?
LIMIT
    1
`

func (q *Queries) GetRmOnlinecmtmp(ctx context.Context, username string) (RmOnlinecmtmp, error) {
	row := q.db.QueryRowContext(ctx, getRmOnlinecmtmp, username)
	var i RmOnlinecmtmp
	err := row.Scan(
		&i.Username,
		&i.Maccm,
		&i.Cmidx,
		&i.Cmstat,
		&i.Enableuser,
		&i.Staticipcm,
		&i.Maccpe,
		&i.Ipcpe,
		&i.Ipmodecpe,
		&i.Cmtsid,
		&i.Cmtsip,
		&i.Groupid,
		&i.Groupname,
		&i.Dlbytes,
		&i.Ulbytes,
		&i.Snrds,
		&i.Snrus,
		&i.Txpwr,
		&i.Rxpwr,
		&i.Pingtime,
		&i.Uptime,
		&i.Loss,
		&i.Dsname,
		&i.Usname,
		&i.Dsifidx,
		&i.Usifidx,
		&i.Timestamp,
	)
	return i, err
}

const getRmOnlinecmtmps = `-- name: GetRmOnlinecmtmps :many
SELECT
    username, maccm, cmidx, cmstat, enableuser, staticipcm, maccpe, ipcpe, ipmodecpe, cmtsid, cmtsip, groupid, groupname, dlbytes, ulbytes, snrds, snrus, txpwr, rxpwr, pingtime, uptime, loss, dsname, usname, dsifidx, usifidx, timestamp
FROM
    rm_onlinecmtmp
LIMIT
    ?
OFFSET
    ?
`

type GetRmOnlinecmtmpsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmOnlinecmtmps(ctx context.Context, arg GetRmOnlinecmtmpsParams) ([]RmOnlinecmtmp, error) {
	rows, err := q.db.QueryContext(ctx, getRmOnlinecmtmps, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmOnlinecmtmp
	for rows.Next() {
		var i RmOnlinecmtmp
		if err := rows.Scan(
			&i.Username,
			&i.Maccm,
			&i.Cmidx,
			&i.Cmstat,
			&i.Enableuser,
			&i.Staticipcm,
			&i.Maccpe,
			&i.Ipcpe,
			&i.Ipmodecpe,
			&i.Cmtsid,
			&i.Cmtsip,
			&i.Groupid,
			&i.Groupname,
			&i.Dlbytes,
			&i.Ulbytes,
			&i.Snrds,
			&i.Snrus,
			&i.Txpwr,
			&i.Rxpwr,
			&i.Pingtime,
			&i.Uptime,
			&i.Loss,
			&i.Dsname,
			&i.Usname,
			&i.Dsifidx,
			&i.Usifidx,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
