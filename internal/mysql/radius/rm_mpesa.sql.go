// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_mpesa.sql

package radius

import (
	"context"
)

const getRmMpesa = `-- name: GetRmMpesa :one
SELECT
    merchantrequestid, checkoutrequestid, resultcode, resultdesc, amount, receiptnumber, transactiondate, phonenumber
FROM
    rm_mpesa
WHERE
    merchantrequestid = ?
LIMIT
    1
`

func (q *Queries) GetRmMpesa(ctx context.Context, merchantrequestid string) (RmMpesa, error) {
	row := q.db.QueryRowContext(ctx, getRmMpesa, merchantrequestid)
	var i RmMpesa
	err := row.Scan(
		&i.Merchantrequestid,
		&i.Checkoutrequestid,
		&i.Resultcode,
		&i.Resultdesc,
		&i.Amount,
		&i.Receiptnumber,
		&i.Transactiondate,
		&i.Phonenumber,
	)
	return i, err
}

const getRmMpesas = `-- name: GetRmMpesas :many
SELECT
    merchantrequestid, checkoutrequestid, resultcode, resultdesc, amount, receiptnumber, transactiondate, phonenumber
FROM
    rm_mpesa
LIMIT
    ?
OFFSET
    ?
`

type GetRmMpesasParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmMpesas(ctx context.Context, arg GetRmMpesasParams) ([]RmMpesa, error) {
	rows, err := q.db.QueryContext(ctx, getRmMpesas, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmMpesa
	for rows.Next() {
		var i RmMpesa
		if err := rows.Scan(
			&i.Merchantrequestid,
			&i.Checkoutrequestid,
			&i.Resultcode,
			&i.Resultdesc,
			&i.Amount,
			&i.Receiptnumber,
			&i.Transactiondate,
			&i.Phonenumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
