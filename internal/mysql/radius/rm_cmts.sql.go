// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rm_cmts.sql

package radius

import (
	"context"
)

const getRmCmt = `-- name: GetRmCmt :one
SELECT
    id, ip, name, community, descr
FROM
    rm_cmts
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRmCmt(ctx context.Context, id int32) (RmCmt, error) {
	row := q.db.QueryRowContext(ctx, getRmCmt, id)
	var i RmCmt
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.Name,
		&i.Community,
		&i.Descr,
	)
	return i, err
}

const getRmCmts = `-- name: GetRmCmts :many
SELECT
    id, ip, name, community, descr
FROM
    rm_cmts
LIMIT
    ?
OFFSET
    ?
`

type GetRmCmtsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetRmCmts(ctx context.Context, arg GetRmCmtsParams) ([]RmCmt, error) {
	rows, err := q.db.QueryContext(ctx, getRmCmts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RmCmt
	for rows.Next() {
		var i RmCmt
		if err := rows.Scan(
			&i.ID,
			&i.Ip,
			&i.Name,
			&i.Community,
			&i.Descr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
