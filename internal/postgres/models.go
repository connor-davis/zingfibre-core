// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AggregateType string

const (
	AggregateTypeCOUNT AggregateType = "COUNT"
	AggregateTypeSUM   AggregateType = "SUM"
	AggregateTypeAVG   AggregateType = "AVG"
	AggregateTypeMIN   AggregateType = "MIN"
	AggregateTypeMAX   AggregateType = "MAX"
)

func (e *AggregateType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AggregateType(s)
	case string:
		*e = AggregateType(s)
	default:
		return fmt.Errorf("unsupported scan type for AggregateType: %T", src)
	}
	return nil
}

type NullAggregateType struct {
	AggregateType AggregateType
	Valid         bool // Valid is true if AggregateType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAggregateType) Scan(value interface{}) error {
	if value == nil {
		ns.AggregateType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AggregateType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAggregateType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AggregateType), nil
}

type JoinType string

const (
	JoinTypeINNER JoinType = "INNER"
	JoinTypeLEFT  JoinType = "LEFT"
	JoinTypeRIGHT JoinType = "RIGHT"
	JoinTypeFULL  JoinType = "FULL"
)

func (e *JoinType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JoinType(s)
	case string:
		*e = JoinType(s)
	default:
		return fmt.Errorf("unsupported scan type for JoinType: %T", src)
	}
	return nil
}

type NullJoinType struct {
	JoinType JoinType
	Valid    bool // Valid is true if JoinType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullJoinType) Scan(value interface{}) error {
	if value == nil {
		ns.JoinType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.JoinType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullJoinType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.JoinType), nil
}

type OrderType string

const (
	OrderTypeASC  OrderType = "ASC"
	OrderTypeDESC OrderType = "DESC"
)

func (e *OrderType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderType(s)
	case string:
		*e = OrderType(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderType: %T", src)
	}
	return nil
}

type NullOrderType struct {
	OrderType OrderType
	Valid     bool // Valid is true if OrderType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderType) Scan(value interface{}) error {
	if value == nil {
		ns.OrderType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderType), nil
}

type RoleType string

const (
	RoleTypeAdmin RoleType = "admin"
	RoleTypeStaff RoleType = "staff"
	RoleTypeUser  RoleType = "user"
)

func (e *RoleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleType(s)
	case string:
		*e = RoleType(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleType: %T", src)
	}
	return nil
}

type NullRoleType struct {
	RoleType RoleType
	Valid    bool // Valid is true if RoleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleType) Scan(value interface{}) error {
	if value == nil {
		ns.RoleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleType), nil
}

type DynamicQuery struct {
	ID        uuid.UUID
	QueryName string
	IsPrimary bool
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type DynamicQueryAggregate struct {
	ID                   uuid.UUID
	DynamicQueryColumnID uuid.UUID
	AggregateColumn      string
	AggregateType        AggregateType
	CreatedAt            pgtype.Timestamptz
	UpdatedAt            pgtype.Timestamptz
}

type DynamicQueryChildQuery struct {
	DynamicQueryID uuid.UUID
	ChildQueryID   uuid.UUID
}

type DynamicQueryClause struct {
	ID             uuid.UUID
	DynamicQueryID uuid.UUID
	ClauseColumn   string
	ClauseOperator string
	ClauseValue    string
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

type DynamicQueryColumn struct {
	ID             uuid.UUID
	DynamicQueryID uuid.UUID
	ColumnTable    string
	ColumnName     string
	ColumnLabel    string
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

type DynamicQueryJoin struct {
	ID              uuid.UUID
	DynamicQueryID  uuid.UUID
	JoinLeftTable   string
	JoinLeftColumn  string
	JoinRightTable  string
	JoinRightColumn string
	JoinType        JoinType
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
}

type DynamicQueryOrder struct {
	ID             uuid.UUID
	DynamicQueryID uuid.UUID
	OrderColumn    string
	OrderType      OrderType
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

type PointsOfInterest struct {
	ID        uuid.UUID
	Name      string
	Key       string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type User struct {
	ID          uuid.UUID
	Email       string
	Password    string
	MfaSecret   pgtype.Text
	MfaEnabled  pgtype.Bool
	MfaVerified pgtype.Bool
	Role        RoleType
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}
