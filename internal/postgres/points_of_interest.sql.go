// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: points_of_interest.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createPointOfInterest = `-- name: CreatePointOfInterest :one
INSERT INTO
    points_of_interest (
        name,
        key
    )
VALUES
    ($1, $2) RETURNING id, name, key, created_at, updated_at
`

type CreatePointOfInterestParams struct {
	Name string
	Key  string
}

func (q *Queries) CreatePointOfInterest(ctx context.Context, arg CreatePointOfInterestParams) (PointsOfInterest, error) {
	row := q.db.QueryRow(ctx, createPointOfInterest, arg.Name, arg.Key)
	var i PointsOfInterest
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePointOfInterest = `-- name: DeletePointOfInterest :one
DELETE FROM points_of_interest
WHERE
    id = $1 RETURNING id, name, key, created_at, updated_at
`

func (q *Queries) DeletePointOfInterest(ctx context.Context, id uuid.UUID) (PointsOfInterest, error) {
	row := q.db.QueryRow(ctx, deletePointOfInterest, id)
	var i PointsOfInterest
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPointOfInterest = `-- name: GetPointOfInterest :one
SELECT
    id, name, key, created_at, updated_at
FROM
    points_of_interest
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetPointOfInterest(ctx context.Context, id uuid.UUID) (PointsOfInterest, error) {
	row := q.db.QueryRow(ctx, getPointOfInterest, id)
	var i PointsOfInterest
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPointsOfInterest = `-- name: GetPointsOfInterest :many
SELECT
    id, name, key, created_at, updated_at
FROM
    points_of_interest
WHERE
    TRIM(LOWER(name)) ILIKE '%' || TRIM(LOWER($3::text)) || '%'
    OR TRIM(LOWER(key)) ILIKE '%' || TRIM(LOWER($3::text)) || '%'
ORDER BY
    key ASC
LIMIT $1
OFFSET $2
`

type GetPointsOfInterestParams struct {
	Limit      int32
	Offset     int32
	SearchTerm string
}

func (q *Queries) GetPointsOfInterest(ctx context.Context, arg GetPointsOfInterestParams) ([]PointsOfInterest, error) {
	rows, err := q.db.Query(ctx, getPointsOfInterest, arg.Limit, arg.Offset, arg.SearchTerm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PointsOfInterest
	for rows.Next() {
		var i PointsOfInterest
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Key,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalPointsOfInterest = `-- name: GetTotalPointsOfInterest :one
SELECT
    COUNT(*) AS total
FROM
    points_of_interest
LIMIT
    1
`

func (q *Queries) GetTotalPointsOfInterest(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalPointsOfInterest)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const updatePointOfInterest = `-- name: UpdatePointOfInterest :one
UPDATE points_of_interest
SET
    name = $1,
    key = $2,
    updated_at = NOW()
WHERE
    id = $3 RETURNING id, name, key, created_at, updated_at
`

type UpdatePointOfInterestParams struct {
	Name string
	Key  string
	ID   uuid.UUID
}

func (q *Queries) UpdatePointOfInterest(ctx context.Context, arg UpdatePointOfInterestParams) (PointsOfInterest, error) {
	row := q.db.QueryRow(ctx, updatePointOfInterest, arg.Name, arg.Key, arg.ID)
	var i PointsOfInterest
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
