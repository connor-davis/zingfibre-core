// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dynamic_query_clauses.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createDynamicQueryClause = `-- name: CreateDynamicQueryClause :one
INSERT INTO
    dynamic_query_clauses (
        dynamic_query_id,
        clause_column,
        clause_operator,
        clause_value
    )
VALUES
    ($1, $2, $3, $4)
RETURNING
    id, dynamic_query_id, clause_column, clause_operator, clause_value, created_at, updated_at
`

type CreateDynamicQueryClauseParams struct {
	DynamicQueryID uuid.UUID
	ClauseColumn   string
	ClauseOperator string
	ClauseValue    string
}

func (q *Queries) CreateDynamicQueryClause(ctx context.Context, arg CreateDynamicQueryClauseParams) (DynamicQueryClause, error) {
	row := q.db.QueryRow(ctx, createDynamicQueryClause,
		arg.DynamicQueryID,
		arg.ClauseColumn,
		arg.ClauseOperator,
		arg.ClauseValue,
	)
	var i DynamicQueryClause
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.ClauseColumn,
		&i.ClauseOperator,
		&i.ClauseValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDynamicQueryClause = `-- name: DeleteDynamicQueryClause :exec
DELETE FROM
    dynamic_query_clauses
WHERE
    id = $1
`

func (q *Queries) DeleteDynamicQueryClause(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDynamicQueryClause, id)
	return err
}

const getDynamicQueryClause = `-- name: GetDynamicQueryClause :one
SELECT
    id, dynamic_query_id, clause_column, clause_operator, clause_value, created_at, updated_at
FROM
    dynamic_query_clauses
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetDynamicQueryClause(ctx context.Context, id uuid.UUID) (DynamicQueryClause, error) {
	row := q.db.QueryRow(ctx, getDynamicQueryClause, id)
	var i DynamicQueryClause
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.ClauseColumn,
		&i.ClauseOperator,
		&i.ClauseValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDynamicQueryClause = `-- name: UpdateDynamicQueryClause :one
UPDATE dynamic_query_clauses
SET
    dynamic_query_id = $1,
    clause_column = $2,
    clause_operator = $3,
    clause_value = $4
WHERE
    id = $5
RETURNING
    id, dynamic_query_id, clause_column, clause_operator, clause_value, created_at, updated_at
`

type UpdateDynamicQueryClauseParams struct {
	DynamicQueryID uuid.UUID
	ClauseColumn   string
	ClauseOperator string
	ClauseValue    string
	ID             uuid.UUID
}

func (q *Queries) UpdateDynamicQueryClause(ctx context.Context, arg UpdateDynamicQueryClauseParams) (DynamicQueryClause, error) {
	row := q.db.QueryRow(ctx, updateDynamicQueryClause,
		arg.DynamicQueryID,
		arg.ClauseColumn,
		arg.ClauseOperator,
		arg.ClauseValue,
		arg.ID,
	)
	var i DynamicQueryClause
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.ClauseColumn,
		&i.ClauseOperator,
		&i.ClauseValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
