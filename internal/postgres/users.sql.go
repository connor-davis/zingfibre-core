// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (
        email,
        password,
        mfa_secret,
        mfa_enabled,
        mfa_verified
    )
VALUES
    ($1, $2, $3, $4, $5) RETURNING id, email, password, mfa_secret, mfa_enabled, mfa_verified, created_at, updated_at
`

type CreateUserParams struct {
	Email       string
	Password    string
	MfaSecret   pgtype.Text
	MfaEnabled  pgtype.Bool
	MfaVerified pgtype.Bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.MfaSecret,
		arg.MfaEnabled,
		arg.MfaVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.MfaSecret,
		&i.MfaEnabled,
		&i.MfaVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE
    id = $1 RETURNING id, email, password, mfa_secret, mfa_enabled, mfa_verified, created_at, updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.MfaSecret,
		&i.MfaEnabled,
		&i.MfaVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT
    id, email, password, mfa_secret, mfa_enabled, mfa_verified, created_at, updated_at
FROM
    users
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.MfaSecret,
		&i.MfaEnabled,
		&i.MfaVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
    id, email, password, mfa_secret, mfa_enabled, mfa_verified, created_at, updated_at
FROM
    users
LIMIT $1
OFFSET $2
`

type GetUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.MfaSecret,
			&i.MfaEnabled,
			&i.MfaVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = $1,
    password = $2,
    mfa_secret = $3,
    mfa_enabled = $4,
    mfa_verified = $5
WHERE
    id = $6 RETURNING id, email, password, mfa_secret, mfa_enabled, mfa_verified, created_at, updated_at
`

type UpdateUserParams struct {
	Email       string
	Password    string
	MfaSecret   pgtype.Text
	MfaEnabled  pgtype.Bool
	MfaVerified pgtype.Bool
	ID          uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.Password,
		arg.MfaSecret,
		arg.MfaEnabled,
		arg.MfaVerified,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.MfaSecret,
		&i.MfaEnabled,
		&i.MfaVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
