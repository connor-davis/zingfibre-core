// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dynamic_query_columns.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createDynamicQueryColumn = `-- name: CreateDynamicQueryColumn :one
INSERT INTO
    dynamic_query_columns (
        dynamic_query_id,
        column_table,
        column_name,
        column_label
    )
VALUES
    ($1, $2, $3, $4)
RETURNING
    id, dynamic_query_id, column_table, column_name, column_label, created_at, updated_at
`

type CreateDynamicQueryColumnParams struct {
	DynamicQueryID uuid.UUID
	ColumnTable    string
	ColumnName     string
	ColumnLabel    string
}

func (q *Queries) CreateDynamicQueryColumn(ctx context.Context, arg CreateDynamicQueryColumnParams) (DynamicQueryColumn, error) {
	row := q.db.QueryRow(ctx, createDynamicQueryColumn,
		arg.DynamicQueryID,
		arg.ColumnTable,
		arg.ColumnName,
		arg.ColumnLabel,
	)
	var i DynamicQueryColumn
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.ColumnTable,
		&i.ColumnName,
		&i.ColumnLabel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDynamicQueryColumn = `-- name: DeleteDynamicQueryColumn :exec
DELETE FROM
    dynamic_query_columns
WHERE
    id = $1
`

func (q *Queries) DeleteDynamicQueryColumn(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDynamicQueryColumn, id)
	return err
}

const getDynamicQueryColumn = `-- name: GetDynamicQueryColumn :one
SELECT
    id, dynamic_query_id, column_table, column_name, column_label, created_at, updated_at
FROM
    dynamic_query_columns
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetDynamicQueryColumn(ctx context.Context, id uuid.UUID) (DynamicQueryColumn, error) {
	row := q.db.QueryRow(ctx, getDynamicQueryColumn, id)
	var i DynamicQueryColumn
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.ColumnTable,
		&i.ColumnName,
		&i.ColumnLabel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDynamicQueryColumnAggregates = `-- name: GetDynamicQueryColumnAggregates :many
SELECT
    t1.id, t1.dynamic_query_column_id, t1.aggregate_column, t1.aggregate_type, t1.created_at, t1.updated_at
FROM
    dynamic_query_aggregates t1
WHERE
    t1.dynamic_query_column_id = $1
ORDER BY
    t1.aggregate_column ASC,
    t1.aggregate_type ASC
`

func (q *Queries) GetDynamicQueryColumnAggregates(ctx context.Context, dynamicQueryColumnID uuid.UUID) ([]DynamicQueryAggregate, error) {
	rows, err := q.db.Query(ctx, getDynamicQueryColumnAggregates, dynamicQueryColumnID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DynamicQueryAggregate
	for rows.Next() {
		var i DynamicQueryAggregate
		if err := rows.Scan(
			&i.ID,
			&i.DynamicQueryColumnID,
			&i.AggregateColumn,
			&i.AggregateType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDynamicQueryColumn = `-- name: UpdateDynamicQueryColumn :one
UPDATE dynamic_query_columns
SET
    dynamic_query_id = $1,
    column_table = $2,
    column_name = $3,
    column_label = $4
WHERE
    id = $5
RETURNING
    id, dynamic_query_id, column_table, column_name, column_label, created_at, updated_at
`

type UpdateDynamicQueryColumnParams struct {
	DynamicQueryID uuid.UUID
	ColumnTable    string
	ColumnName     string
	ColumnLabel    string
	ID             uuid.UUID
}

func (q *Queries) UpdateDynamicQueryColumn(ctx context.Context, arg UpdateDynamicQueryColumnParams) (DynamicQueryColumn, error) {
	row := q.db.QueryRow(ctx, updateDynamicQueryColumn,
		arg.DynamicQueryID,
		arg.ColumnTable,
		arg.ColumnName,
		arg.ColumnLabel,
		arg.ID,
	)
	var i DynamicQueryColumn
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.ColumnTable,
		&i.ColumnName,
		&i.ColumnLabel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
