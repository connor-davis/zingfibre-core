// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dynamic_query_orders.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createDynamicQueryOrder = `-- name: CreateDynamicQueryOrder :one
INSERT INTO
    dynamic_query_orders (
        dynamic_query_id,
        order_column,
        order_type
    )
VALUES
    ($1, $2, $3)
RETURNING
    id, dynamic_query_id, order_column, order_type, created_at, updated_at
`

type CreateDynamicQueryOrderParams struct {
	DynamicQueryID uuid.UUID
	OrderColumn    string
	OrderType      OrderType
}

func (q *Queries) CreateDynamicQueryOrder(ctx context.Context, arg CreateDynamicQueryOrderParams) (DynamicQueryOrder, error) {
	row := q.db.QueryRow(ctx, createDynamicQueryOrder, arg.DynamicQueryID, arg.OrderColumn, arg.OrderType)
	var i DynamicQueryOrder
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.OrderColumn,
		&i.OrderType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDynamicQueryOrder = `-- name: DeleteDynamicQueryOrder :exec
DELETE FROM
    dynamic_query_orders
WHERE
    id = $1
`

func (q *Queries) DeleteDynamicQueryOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDynamicQueryOrder, id)
	return err
}

const getDynamicQueryOrder = `-- name: GetDynamicQueryOrder :one
SELECT
    id, dynamic_query_id, order_column, order_type, created_at, updated_at
FROM
    dynamic_query_orders
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetDynamicQueryOrder(ctx context.Context, id uuid.UUID) (DynamicQueryOrder, error) {
	row := q.db.QueryRow(ctx, getDynamicQueryOrder, id)
	var i DynamicQueryOrder
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.OrderColumn,
		&i.OrderType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDynamicQueryOrder = `-- name: UpdateDynamicQueryOrder :one
UPDATE dynamic_query_orders
SET
    dynamic_query_id = $1,
    order_column = $2,
    order_type = $3
WHERE
    id = $4
RETURNING
    id, dynamic_query_id, order_column, order_type, created_at, updated_at
`

type UpdateDynamicQueryOrderParams struct {
	DynamicQueryID uuid.UUID
	OrderColumn    string
	OrderType      OrderType
	ID             uuid.UUID
}

func (q *Queries) UpdateDynamicQueryOrder(ctx context.Context, arg UpdateDynamicQueryOrderParams) (DynamicQueryOrder, error) {
	row := q.db.QueryRow(ctx, updateDynamicQueryOrder,
		arg.DynamicQueryID,
		arg.OrderColumn,
		arg.OrderType,
		arg.ID,
	)
	var i DynamicQueryOrder
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.OrderColumn,
		&i.OrderType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
