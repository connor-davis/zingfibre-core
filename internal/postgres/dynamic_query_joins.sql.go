// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dynamic_query_joins.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createDynamicQueryJoin = `-- name: CreateDynamicQueryJoin :one
INSERT INTO
    dynamic_query_joins (
        dynamic_query_id,
        join_left_table,
        join_left_column,
        join_right_table,
        join_right_column,
        join_type
    )
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING
    id, dynamic_query_id, join_left_table, join_left_column, join_right_table, join_right_column, join_type, created_at, updated_at
`

type CreateDynamicQueryJoinParams struct {
	DynamicQueryID  uuid.UUID
	JoinLeftTable   string
	JoinLeftColumn  string
	JoinRightTable  string
	JoinRightColumn string
	JoinType        JoinType
}

func (q *Queries) CreateDynamicQueryJoin(ctx context.Context, arg CreateDynamicQueryJoinParams) (DynamicQueryJoin, error) {
	row := q.db.QueryRow(ctx, createDynamicQueryJoin,
		arg.DynamicQueryID,
		arg.JoinLeftTable,
		arg.JoinLeftColumn,
		arg.JoinRightTable,
		arg.JoinRightColumn,
		arg.JoinType,
	)
	var i DynamicQueryJoin
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.JoinLeftTable,
		&i.JoinLeftColumn,
		&i.JoinRightTable,
		&i.JoinRightColumn,
		&i.JoinType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDynamicQueryJoin = `-- name: DeleteDynamicQueryJoin :exec
DELETE FROM
    dynamic_query_joins
WHERE
    id = $1
`

func (q *Queries) DeleteDynamicQueryJoin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDynamicQueryJoin, id)
	return err
}

const getDynamicQueryJoin = `-- name: GetDynamicQueryJoin :one
SELECT
    id, dynamic_query_id, join_left_table, join_left_column, join_right_table, join_right_column, join_type, created_at, updated_at
FROM
    dynamic_query_joins
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetDynamicQueryJoin(ctx context.Context, id uuid.UUID) (DynamicQueryJoin, error) {
	row := q.db.QueryRow(ctx, getDynamicQueryJoin, id)
	var i DynamicQueryJoin
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.JoinLeftTable,
		&i.JoinLeftColumn,
		&i.JoinRightTable,
		&i.JoinRightColumn,
		&i.JoinType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDynamicQueryJoin = `-- name: UpdateDynamicQueryJoin :one
UPDATE dynamic_query_joins
SET
    dynamic_query_id = $1,
    join_left_table = $2,
    join_left_column = $3,
    join_right_table = $4,
    join_right_column = $5,
    join_type = $6
WHERE
    id = $7
RETURNING
    id, dynamic_query_id, join_left_table, join_left_column, join_right_table, join_right_column, join_type, created_at, updated_at
`

type UpdateDynamicQueryJoinParams struct {
	DynamicQueryID  uuid.UUID
	JoinLeftTable   string
	JoinLeftColumn  string
	JoinRightTable  string
	JoinRightColumn string
	JoinType        JoinType
	ID              uuid.UUID
}

func (q *Queries) UpdateDynamicQueryJoin(ctx context.Context, arg UpdateDynamicQueryJoinParams) (DynamicQueryJoin, error) {
	row := q.db.QueryRow(ctx, updateDynamicQueryJoin,
		arg.DynamicQueryID,
		arg.JoinLeftTable,
		arg.JoinLeftColumn,
		arg.JoinRightTable,
		arg.JoinRightColumn,
		arg.JoinType,
		arg.ID,
	)
	var i DynamicQueryJoin
	err := row.Scan(
		&i.ID,
		&i.DynamicQueryID,
		&i.JoinLeftTable,
		&i.JoinLeftColumn,
		&i.JoinRightTable,
		&i.JoinRightColumn,
		&i.JoinType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
